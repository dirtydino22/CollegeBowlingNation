0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install' ]
2 info using npm@1.3.8
3 info using node@v0.10.18
4 verbose readDependencies using package.json deps
5 verbose install where, deps [ '/Users/douglasskiser/Desktop/cbnVerification',
5 verbose install   [ 'express',
5 verbose install     'express-namespace',
5 verbose install     'nconf',
5 verbose install     'ejs',
5 verbose install     'passport-local-mongoose',
5 verbose install     'passport',
5 verbose install     'mongoose',
5 verbose install     'passport-local',
5 verbose install     'nodemailer' ] ]
6 info preinstall CollegeBowlingNation@0.0.1
7 warn package.json express-namespace@0.1.1 No repository field.
8 verbose readDependencies using package.json deps
9 verbose already installed skipping ejs@~0.8.5 /Users/douglasskiser/Desktop/cbnVerification
10 verbose already installed skipping passport-local-mongoose@~0.2.6 /Users/douglasskiser/Desktop/cbnVerification
11 verbose already installed skipping passport@~0.2.0 /Users/douglasskiser/Desktop/cbnVerification
12 verbose cache add [ 'mongoose@~3.8.7', null ]
13 verbose cache add name=undefined spec="mongoose@~3.8.7" args=["mongoose@~3.8.7",null]
14 verbose parsed url { protocol: null,
14 verbose parsed url   slashes: null,
14 verbose parsed url   auth: null,
14 verbose parsed url   host: null,
14 verbose parsed url   port: null,
14 verbose parsed url   hostname: null,
14 verbose parsed url   hash: null,
14 verbose parsed url   search: null,
14 verbose parsed url   query: null,
14 verbose parsed url   pathname: 'mongoose@~3.8.7',
14 verbose parsed url   path: 'mongoose@~3.8.7',
14 verbose parsed url   href: 'mongoose@~3.8.7' }
15 verbose cache add name="mongoose" spec="~3.8.7" args=["mongoose","~3.8.7"]
16 verbose parsed url { protocol: null,
16 verbose parsed url   slashes: null,
16 verbose parsed url   auth: null,
16 verbose parsed url   host: null,
16 verbose parsed url   port: null,
16 verbose parsed url   hostname: null,
16 verbose parsed url   hash: null,
16 verbose parsed url   search: null,
16 verbose parsed url   query: null,
16 verbose parsed url   pathname: '~3.8.7',
16 verbose parsed url   path: '~3.8.7',
16 verbose parsed url   href: '~3.8.7' }
17 verbose addNamed [ 'mongoose', '~3.8.7' ]
18 verbose addNamed [ null, '>=3.8.7-0 <3.9.0-0' ]
19 verbose already installed skipping passport-local@~0.1.6 /Users/douglasskiser/Desktop/cbnVerification
20 silly lockFile e42a200d-mongoose-3-8-7 mongoose@~3.8.7
21 verbose lock mongoose@~3.8.7 /Users/douglasskiser/.npm/e42a200d-mongoose-3-8-7.lock
22 verbose already installed skipping nodemailer@~0.6.1 /Users/douglasskiser/Desktop/cbnVerification
23 silly addNameRange { name: 'mongoose', range: '>=3.8.7-0 <3.9.0-0', hasData: false }
24 verbose url raw mongoose
25 verbose url resolving [ 'https://registry.npmjs.org/', './mongoose' ]
26 verbose url resolved https://registry.npmjs.org/mongoose
27 info trying registry request attempt 1 at 21:33:40
28 verbose etag "6NBPXMQWN1IKR803KVKBOAASX"
29 http GET https://registry.npmjs.org/mongoose
30 verbose already installed skipping nconf@~0.6.9 /Users/douglasskiser/Desktop/cbnVerification
31 verbose already installed skipping express@3.4.3 /Users/douglasskiser/Desktop/cbnVerification
32 verbose already installed skipping express-namespace@~0.1.1 /Users/douglasskiser/Desktop/cbnVerification
33 http 304 https://registry.npmjs.org/mongoose
34 silly registry.get cb [ 304,
34 silly registry.get   { date: 'Mon, 03 Mar 2014 02:33:41 GMT',
34 silly registry.get     server: 'Apache',
34 silly registry.get     connection: 'Keep-Alive',
34 silly registry.get     'keep-alive': 'timeout=10, max=50',
34 silly registry.get     etag: '"6NBPXMQWN1IKR803KVKBOAASX"',
34 silly registry.get     'cache-control': 'max-age=1',
34 silly registry.get     vary: 'Accept' } ]
35 verbose etag mongoose from cache
36 silly addNameRange number 2 { name: 'mongoose', range: '>=3.8.7-0 <3.9.0-0', hasData: true }
37 silly addNameRange versions [ 'mongoose',
37 silly addNameRange   [ '0.0.1',
37 silly addNameRange     '0.0.2',
37 silly addNameRange     '0.0.3',
37 silly addNameRange     '0.0.4',
37 silly addNameRange     '0.0.5',
37 silly addNameRange     '1.0.0',
37 silly addNameRange     '1.0.1',
37 silly addNameRange     '1.0.2',
37 silly addNameRange     '0.0.6',
37 silly addNameRange     '1.0.3',
37 silly addNameRange     '1.0.4',
37 silly addNameRange     '1.0.5',
37 silly addNameRange     '1.0.6',
37 silly addNameRange     '1.0.7',
37 silly addNameRange     '1.0.8',
37 silly addNameRange     '1.0.10',
37 silly addNameRange     '1.0.11',
37 silly addNameRange     '1.0.12',
37 silly addNameRange     '1.0.13',
37 silly addNameRange     '1.0.14',
37 silly addNameRange     '1.0.15',
37 silly addNameRange     '1.0.16',
37 silly addNameRange     '1.1.0',
37 silly addNameRange     '1.1.1',
37 silly addNameRange     '1.1.2',
37 silly addNameRange     '1.1.3',
37 silly addNameRange     '1.1.4',
37 silly addNameRange     '1.1.5',
37 silly addNameRange     '1.1.6',
37 silly addNameRange     '1.1.7',
37 silly addNameRange     '1.1.8',
37 silly addNameRange     '1.1.9',
37 silly addNameRange     '1.1.10',
37 silly addNameRange     '1.1.11',
37 silly addNameRange     '1.1.12',
37 silly addNameRange     '1.1.13',
37 silly addNameRange     '1.1.14',
37 silly addNameRange     '1.1.15',
37 silly addNameRange     '1.1.16',
37 silly addNameRange     '1.1.17',
37 silly addNameRange     '1.1.18',
37 silly addNameRange     '1.1.19',
37 silly addNameRange     '1.1.20',
37 silly addNameRange     '1.1.21',
37 silly addNameRange     '1.1.22',
37 silly addNameRange     '1.1.23',
37 silly addNameRange     '1.1.24',
37 silly addNameRange     '1.1.25',
37 silly addNameRange     '1.2.0',
37 silly addNameRange     '1.3.0',
37 silly addNameRange     '1.3.1',
37 silly addNameRange     '1.3.2',
37 silly addNameRange     '1.3.3',
37 silly addNameRange     '1.3.4',
37 silly addNameRange     '1.3.5',
37 silly addNameRange     '1.3.6',
37 silly addNameRange     '1.3.7',
37 silly addNameRange     '1.4.0',
37 silly addNameRange     '1.5.0',
37 silly addNameRange     '1.6.0',
37 silly addNameRange     '1.7.2',
37 silly addNameRange     '1.7.3',
37 silly addNameRange     '1.7.4',
37 silly addNameRange     '1.8.0',
37 silly addNameRange     '1.8.1',
37 silly addNameRange     '1.8.2',
37 silly addNameRange     '1.8.3',
37 silly addNameRange     '1.8.4',
37 silly addNameRange     '2.0.0',
37 silly addNameRange     '2.0.1',
37 silly addNameRange     '2.0.2',
37 silly addNameRange     '2.0.3',
37 silly addNameRange     '2.0.4',
37 silly addNameRange     '2.1.0',
37 silly addNameRange     '2.1.1',
37 silly addNameRange     '2.1.2',
37 silly addNameRange     '2.1.3',
37 silly addNameRange     '2.1.4',
37 silly addNameRange     '2.2.0',
37 silly addNameRange     '2.2.1',
37 silly addNameRange     '2.2.2',
37 silly addNameRange     '2.2.3',
37 silly addNameRange     '2.2.4',
37 silly addNameRange     '2.3.0',
37 silly addNameRange     '2.3.1',
37 silly addNameRange     '2.3.2',
37 silly addNameRange     '2.3.3',
37 silly addNameRange     '2.3.4',
37 silly addNameRange     '2.3.5',
37 silly addNameRange     '2.3.6',
37 silly addNameRange     '2.3.7',
37 silly addNameRange     '2.3.8',
37 silly addNameRange     '2.3.9',
37 silly addNameRange     '2.3.10',
37 silly addNameRange     '2.3.11',
37 silly addNameRange     '2.3.12',
37 silly addNameRange     '2.3.13',
37 silly addNameRange     '2.4.0',
37 silly addNameRange     '2.4.1',
37 silly addNameRange     '2.4.2',
37 silly addNameRange     '2.4.3',
37 silly addNameRange     '2.4.4',
37 silly addNameRange     '2.4.5',
37 silly addNameRange     '2.4.6',
37 silly addNameRange     '2.4.7',
37 silly addNameRange     '2.4.8',
37 silly addNameRange     '2.4.9',
37 silly addNameRange     '2.4.10',
37 silly addNameRange     '2.5.0',
37 silly addNameRange     '2.5.1',
37 silly addNameRange     '2.5.2',
37 silly addNameRange     '2.5.3',
37 silly addNameRange     '2.5.4',
37 silly addNameRange     '2.5.5',
37 silly addNameRange     '2.5.6',
37 silly addNameRange     '2.5.7',
37 silly addNameRange     '2.5.8',
37 silly addNameRange     '2.5.9',
37 silly addNameRange     '2.5.10',
37 silly addNameRange     '2.5.11',
37 silly addNameRange     '2.5.12',
37 silly addNameRange     '2.5.13',
37 silly addNameRange     '2.5.14',
37 silly addNameRange     '2.6.0',
37 silly addNameRange     '2.6.1',
37 silly addNameRange     '2.6.2',
37 silly addNameRange     '2.6.3',
37 silly addNameRange     '2.6.4',
37 silly addNameRange     '2.6.5',
37 silly addNameRange     '2.6.6',
37 silly addNameRange     '2.6.7',
37 silly addNameRange     '2.6.8',
37 silly addNameRange     '2.7.0',
37 silly addNameRange     '2.7.1',
37 silly addNameRange     '2.7.2',
37 silly addNameRange     '2.7.4',
37 silly addNameRange     '2.7.3',
37 silly addNameRange     '3.0.0',
37 silly addNameRange     '3.0.1',
37 silly addNameRange     '3.0.2',
37 silly addNameRange     '2.8.0',
37 silly addNameRange     '3.0.3',
37 silly addNameRange     '3.1.0',
37 silly addNameRange     '2.8.1',
37 silly addNameRange     '3.1.2-pre',
37 silly addNameRange     '3.1.1',
37 silly addNameRange     '2.8.2',
37 silly addNameRange     '2.8.3',
37 silly addNameRange     '3.1.2',
37 silly addNameRange     '2.9.0',
37 silly addNameRange     '3.2.0',
37 silly addNameRange     '2.9.1',
37 silly addNameRange     '3.2.1',
37 silly addNameRange     '2.9.2',
37 silly addNameRange     '3.2.2',
37 silly addNameRange     '3.3.0',
37 silly addNameRange     '3.3.1',
37 silly addNameRange     '2.9.3',
37 silly addNameRange     '3.4.0',
37 silly addNameRange     '2.9.4',
37 silly addNameRange     '2.9.5',
37 silly addNameRange     '3.5.0',
37 silly addNameRange     '3.5.1',
37 silly addNameRange     '3.5.2',
37 silly addNameRange     '3.5.3',
37 silly addNameRange     '2.9.6',
37 silly addNameRange     '2.9.7',
37 silly addNameRange     '3.5.4',
37 silly addNameRange     '3.5.5',
37 silly addNameRange     '2.9.8',
37 silly addNameRange     '2.9.9',
37 silly addNameRange     '3.5.6',
37 silly addNameRange     '3.5.7',
37 silly addNameRange     '3.5.8',
37 silly addNameRange     '2.9.10',
37 silly addNameRange     '3.5.9',
37 silly addNameRange     '3.6.2',
37 silly addNameRange     '3.5.10',
37 silly addNameRange     '3.6.3',
37 silly addNameRange     '3.5.11',
37 silly addNameRange     '3.6.4',
37 silly addNameRange     '3.6.5',
37 silly addNameRange     '3.6.6',
37 silly addNameRange     '3.6.7',
37 silly addNameRange     '3.5.12',
37 silly addNameRange     '3.6.8',
37 silly addNameRange     '3.6.9',
37 silly addNameRange     '3.6.10',
37 silly addNameRange     '3.5.13',
37 silly addNameRange     '3.5.14',
37 silly addNameRange     '3.6.11',
37 silly addNameRange     '3.6.12',
37 silly addNameRange     '3.6.13',
37 silly addNameRange     '3.6.14',
37 silly addNameRange     '3.6.15',
37 silly addNameRange     '3.5.15',
37 silly addNameRange     '3.7.0',
37 silly addNameRange     '3.6.16',
37 silly addNameRange     '3.5.16',
37 silly addNameRange     '3.6.17',
37 silly addNameRange     '3.7.2',
37 silly addNameRange     '3.0.0-alpha1',
37 silly addNameRange     '3.0.0-alpha2',
37 silly addNameRange     '3.0.0-rc0',
37 silly addNameRange     '3.6.0-rc0',
37 silly addNameRange     '3.6.0-rc1',
37 silly addNameRange     '3.6.18',
37 silly addNameRange     '3.7.3',
37 silly addNameRange     '3.6.19',
37 silly addNameRange     '3.6.20',
37 silly addNameRange     '3.7.4',
37 silly addNameRange     '3.8.0',
37 silly addNameRange     '3.8.1',
37 silly addNameRange     '3.8.2',
37 silly addNameRange     '3.8.3',
37 silly addNameRange     '3.8.4',
37 silly addNameRange     '3.8.5',
37 silly addNameRange     '3.8.6',
37 silly addNameRange     '3.8.7',
37 silly addNameRange     '3.8.8' ] ]
38 verbose addNamed [ 'mongoose', '3.8.8' ]
39 verbose addNamed [ '3.8.8', '3.8.8' ]
40 silly lockFile 60cf8ebc-mongoose-3-8-8 mongoose@3.8.8
41 verbose lock mongoose@3.8.8 /Users/douglasskiser/.npm/60cf8ebc-mongoose-3-8-8.lock
42 silly lockFile 60cf8ebc-mongoose-3-8-8 mongoose@3.8.8
43 silly lockFile 60cf8ebc-mongoose-3-8-8 mongoose@3.8.8
44 silly lockFile e42a200d-mongoose-3-8-7 mongoose@~3.8.7
45 silly lockFile e42a200d-mongoose-3-8-7 mongoose@~3.8.7
46 silly resolved [ { name: 'mongoose',
46 silly resolved     description: 'Mongoose MongoDB ODM',
46 silly resolved     version: '3.8.8',
46 silly resolved     author: { name: 'Guillermo Rauch', email: 'guillermo@learnboost.com' },
46 silly resolved     keywords:
46 silly resolved      [ 'mongodb',
46 silly resolved        'document',
46 silly resolved        'model',
46 silly resolved        'schema',
46 silly resolved        'database',
46 silly resolved        'odm',
46 silly resolved        'data',
46 silly resolved        'datastore',
46 silly resolved        'query',
46 silly resolved        'nosql',
46 silly resolved        'orm',
46 silly resolved        'db' ],
46 silly resolved     dependencies:
46 silly resolved      { hooks: '0.2.1',
46 silly resolved        mongodb: '1.3.23',
46 silly resolved        ms: '0.1.0',
46 silly resolved        sliced: '0.0.5',
46 silly resolved        muri: '0.3.1',
46 silly resolved        mpromise: '0.4.3',
46 silly resolved        mpath: '0.1.1',
46 silly resolved        'regexp-clone': '0.0.1',
46 silly resolved        mquery: '0.5.3' },
46 silly resolved     devDependencies:
46 silly resolved      { mocha: '1.12.0',
46 silly resolved        'node-static': '0.5.9',
46 silly resolved        dox: '0.3.1',
46 silly resolved        jade: '0.26.3',
46 silly resolved        'highlight.js': '7.0.1',
46 silly resolved        markdown: '0.3.1',
46 silly resolved        'promises-aplus-tests': '>= 1.0.2',
46 silly resolved        tbd: '0.6.4',
46 silly resolved        benchmark: '1.0.0',
46 silly resolved        open: '0.0.3',
46 silly resolved        async: '0.2.5' },
46 silly resolved     directories: { lib: './lib/mongoose' },
46 silly resolved     scripts: { test: 'make test' },
46 silly resolved     main: './index.js',
46 silly resolved     engines: { node: '>=0.6.19' },
46 silly resolved     bugs:
46 silly resolved      { url: 'https://github.com/learnboost/mongoose/issues/new',
46 silly resolved        email: 'mongoose-orm@googlegroups.com' },
46 silly resolved     repository: { type: 'git', url: 'git://github.com/LearnBoost/mongoose.git' },
46 silly resolved     homepage: 'http://mongoosejs.com',
46 silly resolved     readme: '# Mongoose\n\nMongoose is a [MongoDB](http://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment.\n\n[![Build Status](https://travis-ci.org/LearnBoost/mongoose.png?branch=3.8.x)](https://travis-ci.org/LearnBoost/mongoose)\n\n## Documentation\n\n[mongoosejs.com](http://mongoosejs.com/)\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [bug reports](https://github.com/learnboost/mongoose/issues/)\n  - [help forum](http://groups.google.com/group/mongoose-orm)\n  - [MongoDB support](http://www.mongodb.org/display/DOCS/Technical+Support)\n  - (irc) #mongoosejs on freenode\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.com/) to see hundreds of related modules from the community.\n\n## Contributors\n\nView all 100+ [contributors](https://github.com/learnboost/mongoose/graphs/contributors). Stand up and be counted as a [contributor](https://github.com/LearnBoost/mongoose/blob/master/CONTRIBUTING.md) too!\n\n## Live Examples\n<a href="https://runnable.com/mongoose" target="_blank"><img src="https://runnable.com/external/styles/assets/runnablebtn.png" style="width:67px;height:25px;"></a>\n\n## Installation\n\nFirst install [node.js](http://nodejs.org/) and [mongodb](http://www.mongodb.org/downloads). Then:\n\n```sh\n$ npm install mongoose\n```\n\n## Stability\n\nThe current stable branch is [3.8.x](https://github.com/LearnBoost/mongoose/tree/3.8.x). New (unstable) development always occurs on the [master](https://github.com/LearnBoost/mongoose/tree/master) branch.\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongoose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n```js\nvar mongoose = require(\'mongoose\');\n\nmongoose.connect(\'mongodb://localhost/my_database\');\n```\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you\'re using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Important!** Mongoose buffers all the commands until it\'s connected to the database. This means that you don\'t have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface. \n\n```js\nvar Schema = mongoose.Schema\n  , ObjectId = Schema.ObjectId;\n\nvar BlogPost = new Schema({\n    author    : ObjectId\n  , title     : String\n  , body      : String\n  , date      : Date\n});\n```\n\nAside from defining the structure of your documents and the types of data you\'re storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n```js\nvar Comment = new Schema({\n    name  :  { type: String, default: \'hahaha\' }\n  , age   :  { type: Number, min: 18, index: true }\n  , bio   :  { type: String, match: /[a-z]/ }\n  , date  :  { type: Date, default: Date.now }\n  , buff  :  Buffer\n});\n\n// a setter\nComment.path(\'name\').set(function (v) {\n  return capitalize(v);\n});\n\n// middleware\nComment.pre(\'save\', function (next) {\n  notify(this.get(\'email\'));\n  next();\n});\n```\n\nTake a look at the example in `examples/schema.js` for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model(\'ModelName\', mySchema)`, we can access it through the same function\n\n```js\nvar myModel = mongoose.model(\'ModelName\');\n```\n\nOr just do it all at once\n\n```js\nvar MyModel = mongoose.model(\'ModelName\', mySchema);\n```\n\nWe can then instantiate it, and save it:\n\n```js\nvar instance = new MyModel();\ninstance.my.key = \'hello\';\ninstance.save(function (err) {\n  //\n});\n```\n\nOr we can find documents from the same collection\n\n```js\nMyModel.find({}, function (err, docs) {\n  // docs.forEach\n});\n```\n\nYou can also `findOne`, `findById`, `update`, etc. For more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model(\'ModelName\')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n```js\nvar conn = mongoose.createConnection(\'your connection string\')\n  , MyModel = conn.model(\'ModelName\', schema)\n  , m = new MyModel;\nm.save(); // works\n```\n\nvs\n\n```js\nvar conn = mongoose.createConnection(\'your connection string\')\n  , MyModel = mongoose.model(\'ModelName\', schema)\n  , m = new MyModel;\nm.save(); // does not work b/c the default connection object was never connected\n```\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n```\ncomments: [Comments]\n```\n\nWhere `Comments` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n```js\n// retrieve my model\nvar BlogPost = mongoose.model(\'BlogPost\');\n\n// create a blog post\nvar post = new BlogPost();\n\n// create a comment\npost.comments.push({ title: \'My comment\' });\n\npost.save(function (err) {\n  if (!err) console.log(\'Success!\');\n});\n```\n\nThe same goes for removing them:\n\n```js\nBlogPost.findById(myId, function (err, post) {\n  if (!err) {\n    post.comments[0].remove();\n    post.save(function (err) {\n      // do something\n    });\n  }\n});\n```\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it\'s bubbled to the `save()` error callback, so error handling is a snap!\n\nMongoose interacts with your embedded documents in arrays _atomically_, out of the box.\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n```js\nschema.pre(\'set\', function (next, path, val, typel) {\n  // `this` is the current Document\n  this.emit(\'set\', path, val);\n\n  // Pass control to the next pre\n  next();\n});\n```\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n```js\n.pre(method, function firstPre (next, methodArg1, methodArg2) {\n  // Mutate methodArg1\n  next("altered-" + methodArg1.toString(), methodArg2);\n});\n\n// pre declaration is chainable\n.pre(method, function secondPre (next, methodArg1, methodArg2) {\n  console.log(methodArg1);\n  // => \'altered-originalValOfMethodArg1\' \n      \n  console.log(methodArg2);\n  // => \'originalValOfMethodArg2\' \n      \n  // Passing no arguments to `next` automatically passes along the current argument values\n  // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n  // and also equivalent to, with the example method arg \n  // values, `next(\'altered-originalValOfMethodArg1\', \'originalValOfMethodArg2\')`\n  next();\n});\n```\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n```js\nnew Schema({\n    broken: { type: Boolean }\n  , asset : {\n        name: String\n      , type: String // uh oh, it broke. asset will be interpreted as String\n    }\n});\n\nnew Schema({\n    works: { type: Boolean }\n  , asset : {\n        name: String\n      , type: { type: String } // works. asset is an object with a type property\n    }\n});\n```\n\n### Driver access\n\nThe driver being used defaults to [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) and is directly accessible through `YourModel.collection`. **Note**: using the driver directly bypasses all Mongoose power-tools like validation, getters, setters, hooks, etc.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated using [dox](http://github.com/visionmedia/dox).\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
46 silly resolved     readmeFilename: 'README.md',
46 silly resolved     _id: 'mongoose@3.8.8',
46 silly resolved     _from: 'mongoose@~3.8.7' } ]
47 info install mongoose@3.8.8 into /Users/douglasskiser/Desktop/cbnVerification
48 info installOne mongoose@3.8.8
49 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose unbuild
50 verbose tar unpack /Users/douglasskiser/.npm/mongoose/3.8.8/package.tgz
51 silly lockFile 74d98a46-rification-node-modules-mongoose tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
52 verbose lock tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose /Users/douglasskiser/.npm/74d98a46-rification-node-modules-mongoose.lock
53 silly lockFile 44758fa3-r-npm-mongoose-3-8-8-package-tgz tar:///Users/douglasskiser/.npm/mongoose/3.8.8/package.tgz
54 verbose lock tar:///Users/douglasskiser/.npm/mongoose/3.8.8/package.tgz /Users/douglasskiser/.npm/44758fa3-r-npm-mongoose-3-8-8-package-tgz.lock
55 silly gunzTarPerm modes [ '755', '644' ]
56 silly gunzTarPerm extractEntry package.json
57 silly gunzTarPerm extractEntry .npmignore
58 silly gunzTarPerm extractEntry README.md
59 silly gunzTarPerm extractEntry static.js
60 silly gunzTarPerm extractEntry index.js
61 silly gunzTarPerm extractEntry website.js
62 silly gunzTarPerm extractEntry .travis.yml
63 silly gunzTarPerm extractEntry contRun.sh
64 silly gunzTarPerm extractEntry lib/aggregate.js
65 silly gunzTarPerm extractEntry lib/statemachine.js
66 silly gunzTarPerm extractEntry lib/error.js
67 silly gunzTarPerm extractEntry lib/index.js
68 silly gunzTarPerm extractEntry lib/utils.js
69 silly gunzTarPerm extractEntry lib/model.js
70 silly gunzTarPerm extractEntry lib/collection.js
71 silly gunzTarPerm extractEntry lib/query.js
72 silly gunzTarPerm extractEntry lib/queryhelpers.js
73 silly gunzTarPerm extractEntry lib/querystream.js
74 silly gunzTarPerm extractEntry lib/document.js
75 silly gunzTarPerm extractEntry lib/schematype.js
76 silly gunzTarPerm extractEntry lib/connectionstate.js
77 silly gunzTarPerm extractEntry lib/schema.js
78 silly gunzTarPerm extractEntry lib/connection.js
79 silly gunzTarPerm extractEntry lib/schemadefault.js
80 silly gunzTarPerm extractEntry lib/internal.js
81 silly gunzTarPerm extractEntry lib/virtualtype.js
82 silly gunzTarPerm extractEntry lib/promise.js
83 silly gunzTarPerm extractEntry lib/schema/array.js
84 silly gunzTarPerm extractEntry lib/schema/boolean.js
85 silly gunzTarPerm extractEntry lib/schema/buffer.js
86 silly gunzTarPerm extractEntry lib/schema/date.js
87 silly gunzTarPerm extractEntry lib/schema/documentarray.js
88 silly gunzTarPerm extractEntry lib/schema/index.js
89 silly gunzTarPerm extractEntry lib/schema/mixed.js
90 silly gunzTarPerm extractEntry lib/schema/number.js
91 silly gunzTarPerm extractEntry lib/schema/objectid.js
92 silly gunzTarPerm extractEntry lib/schema/string.js
93 silly gunzTarPerm extractEntry lib/error/cast.js
94 silly gunzTarPerm extractEntry lib/error/divergentArray.js
95 silly gunzTarPerm extractEntry lib/error/messages.js
96 silly gunzTarPerm extractEntry lib/error/missingSchema.js
97 silly gunzTarPerm extractEntry lib/error/overwriteModel.js
98 silly gunzTarPerm extractEntry lib/error/validation.js
99 silly gunzTarPerm extractEntry lib/error/validator.js
100 silly gunzTarPerm extractEntry lib/error/version.js
101 silly gunzTarPerm extractEntry lib/types/array.js
102 silly gunzTarPerm extractEntry lib/types/buffer.js
103 silly gunzTarPerm extractEntry lib/types/documentarray.js
104 silly gunzTarPerm extractEntry lib/types/embedded.js
105 silly gunzTarPerm extractEntry lib/types/index.js
106 silly gunzTarPerm extractEntry lib/types/objectid.js
107 silly gunzTarPerm extractEntry lib/drivers/SPEC.md
108 silly gunzTarPerm extractEntry lib/drivers/node-mongodb-native/binary.js
109 silly gunzTarPerm extractEntry lib/drivers/node-mongodb-native/collection.js
110 silly gunzTarPerm extractEntry lib/drivers/node-mongodb-native/connection.js
111 silly gunzTarPerm extractEntry lib/drivers/node-mongodb-native/objectid.js
112 silly gunzTarPerm extractEntry History.md
113 silly gunzTarPerm extractEntry release-items.md
114 silly gunzTarPerm extractEntry CONTRIBUTING.md
115 silly gunzTarPerm extractEntry examples/README.md
116 silly gunzTarPerm extractEntry examples/doc-methods.js
117 silly gunzTarPerm extractEntry examples/statics/person.js
118 silly gunzTarPerm extractEntry examples/statics/statics.js
119 silly gunzTarPerm extractEntry examples/express/README.md
120 silly gunzTarPerm extractEntry examples/express/connection-sharing/package.json
121 silly gunzTarPerm extractEntry examples/express/connection-sharing/README.md
122 silly gunzTarPerm extractEntry examples/express/connection-sharing/app.js
123 silly gunzTarPerm extractEntry examples/express/connection-sharing/modelA.js
124 silly gunzTarPerm extractEntry examples/express/connection-sharing/routes.js
125 silly gunzTarPerm extractEntry examples/geospatial/package.json
126 silly gunzTarPerm extractEntry examples/geospatial/geoJSONSchema.js
127 silly gunzTarPerm extractEntry examples/geospatial/geoJSONexample.js
128 silly gunzTarPerm extractEntry examples/geospatial/geospatial.js
129 silly gunzTarPerm extractEntry examples/geospatial/person.js
130 silly gunzTarPerm extractEntry examples/globalschemas/gs_example.js
131 silly gunzTarPerm extractEntry examples/globalschemas/person.js
132 silly gunzTarPerm extractEntry examples/lean/package.json
133 silly gunzTarPerm extractEntry examples/lean/lean.js
134 silly gunzTarPerm extractEntry examples/lean/person.js
135 silly gunzTarPerm extractEntry examples/aggregate/package.json
136 silly gunzTarPerm extractEntry examples/aggregate/aggregate.js
137 silly gunzTarPerm extractEntry examples/aggregate/person.js
138 silly gunzTarPerm extractEntry examples/population/population-across-three-collections.js
139 silly gunzTarPerm extractEntry examples/population/population-basic.js
140 silly gunzTarPerm extractEntry examples/population/population-of-existing-doc.js
141 silly gunzTarPerm extractEntry examples/population/population-of-multiple-existing-docs.js
142 silly gunzTarPerm extractEntry examples/population/population-options.js
143 silly gunzTarPerm extractEntry examples/population/population-plain-objects.js
144 silly gunzTarPerm extractEntry examples/promises/package.json
145 silly gunzTarPerm extractEntry examples/promises/person.js
146 silly gunzTarPerm extractEntry examples/promises/promise.js
147 silly gunzTarPerm extractEntry examples/querybuilder/package.json
148 silly gunzTarPerm extractEntry examples/querybuilder/person.js
149 silly gunzTarPerm extractEntry examples/querybuilder/querybuilder.js
150 silly gunzTarPerm extractEntry examples/replicasets/package.json
151 silly gunzTarPerm extractEntry examples/replicasets/person.js
152 silly gunzTarPerm extractEntry examples/replicasets/replica-sets.js
153 silly gunzTarPerm extractEntry examples/schema/schema.js
154 silly gunzTarPerm extractEntry examples/schema/storing-schemas-as-json/index.js
155 silly gunzTarPerm extractEntry examples/schema/storing-schemas-as-json/schema.json
156 silly gunzTarPerm extractEntry examples/mapreduce/package.json
157 silly gunzTarPerm extractEntry examples/mapreduce/mapreduce.js
158 silly gunzTarPerm extractEntry examples/mapreduce/person.js
159 silly lockFile 74d98a46-rification-node-modules-mongoose tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
160 silly lockFile 74d98a46-rification-node-modules-mongoose tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
161 silly lockFile 44758fa3-r-npm-mongoose-3-8-8-package-tgz tar:///Users/douglasskiser/.npm/mongoose/3.8.8/package.tgz
162 silly lockFile 44758fa3-r-npm-mongoose-3-8-8-package-tgz tar:///Users/douglasskiser/.npm/mongoose/3.8.8/package.tgz
163 info preinstall mongoose@3.8.8
164 verbose readDependencies using package.json deps
165 verbose readDependencies using package.json deps
166 verbose cache add [ 'hooks@0.2.1', null ]
167 verbose cache add name=undefined spec="hooks@0.2.1" args=["hooks@0.2.1",null]
168 verbose parsed url { protocol: null,
168 verbose parsed url   slashes: null,
168 verbose parsed url   auth: null,
168 verbose parsed url   host: null,
168 verbose parsed url   port: null,
168 verbose parsed url   hostname: null,
168 verbose parsed url   hash: null,
168 verbose parsed url   search: null,
168 verbose parsed url   query: null,
168 verbose parsed url   pathname: 'hooks@0.2.1',
168 verbose parsed url   path: 'hooks@0.2.1',
168 verbose parsed url   href: 'hooks@0.2.1' }
169 verbose cache add name="hooks" spec="0.2.1" args=["hooks","0.2.1"]
170 verbose parsed url { protocol: null,
170 verbose parsed url   slashes: null,
170 verbose parsed url   auth: null,
170 verbose parsed url   host: null,
170 verbose parsed url   port: null,
170 verbose parsed url   hostname: null,
170 verbose parsed url   hash: null,
170 verbose parsed url   search: null,
170 verbose parsed url   query: null,
170 verbose parsed url   pathname: '0.2.1',
170 verbose parsed url   path: '0.2.1',
170 verbose parsed url   href: '0.2.1' }
171 verbose addNamed [ 'hooks', '0.2.1' ]
172 verbose addNamed [ '0.2.1', '0.2.1' ]
173 silly lockFile 207ce50b-hooks-0-2-1 hooks@0.2.1
174 verbose lock hooks@0.2.1 /Users/douglasskiser/.npm/207ce50b-hooks-0-2-1.lock
175 verbose cache add [ 'mongodb@1.3.23', null ]
176 verbose cache add name=undefined spec="mongodb@1.3.23" args=["mongodb@1.3.23",null]
177 verbose parsed url { protocol: null,
177 verbose parsed url   slashes: null,
177 verbose parsed url   auth: null,
177 verbose parsed url   host: null,
177 verbose parsed url   port: null,
177 verbose parsed url   hostname: null,
177 verbose parsed url   hash: null,
177 verbose parsed url   search: null,
177 verbose parsed url   query: null,
177 verbose parsed url   pathname: 'mongodb@1.3.23',
177 verbose parsed url   path: 'mongodb@1.3.23',
177 verbose parsed url   href: 'mongodb@1.3.23' }
178 verbose cache add name="mongodb" spec="1.3.23" args=["mongodb","1.3.23"]
179 verbose parsed url { protocol: null,
179 verbose parsed url   slashes: null,
179 verbose parsed url   auth: null,
179 verbose parsed url   host: null,
179 verbose parsed url   port: null,
179 verbose parsed url   hostname: null,
179 verbose parsed url   hash: null,
179 verbose parsed url   search: null,
179 verbose parsed url   query: null,
179 verbose parsed url   pathname: '1.3.23',
179 verbose parsed url   path: '1.3.23',
179 verbose parsed url   href: '1.3.23' }
180 verbose addNamed [ 'mongodb', '1.3.23' ]
181 verbose addNamed [ '1.3.23', '1.3.23' ]
182 silly lockFile 130bb479-mongodb-1-3-23 mongodb@1.3.23
183 verbose lock mongodb@1.3.23 /Users/douglasskiser/.npm/130bb479-mongodb-1-3-23.lock
184 verbose cache add [ 'ms@0.1.0', null ]
185 verbose cache add name=undefined spec="ms@0.1.0" args=["ms@0.1.0",null]
186 verbose parsed url { protocol: null,
186 verbose parsed url   slashes: null,
186 verbose parsed url   auth: null,
186 verbose parsed url   host: null,
186 verbose parsed url   port: null,
186 verbose parsed url   hostname: null,
186 verbose parsed url   hash: null,
186 verbose parsed url   search: null,
186 verbose parsed url   query: null,
186 verbose parsed url   pathname: 'ms@0.1.0',
186 verbose parsed url   path: 'ms@0.1.0',
186 verbose parsed url   href: 'ms@0.1.0' }
187 verbose cache add name="ms" spec="0.1.0" args=["ms","0.1.0"]
188 verbose parsed url { protocol: null,
188 verbose parsed url   slashes: null,
188 verbose parsed url   auth: null,
188 verbose parsed url   host: null,
188 verbose parsed url   port: null,
188 verbose parsed url   hostname: null,
188 verbose parsed url   hash: null,
188 verbose parsed url   search: null,
188 verbose parsed url   query: null,
188 verbose parsed url   pathname: '0.1.0',
188 verbose parsed url   path: '0.1.0',
188 verbose parsed url   href: '0.1.0' }
189 verbose addNamed [ 'ms', '0.1.0' ]
190 verbose addNamed [ '0.1.0', '0.1.0' ]
191 silly lockFile 9555626c-ms-0-1-0 ms@0.1.0
192 verbose lock ms@0.1.0 /Users/douglasskiser/.npm/9555626c-ms-0-1-0.lock
193 verbose cache add [ 'sliced@0.0.5', null ]
194 verbose cache add name=undefined spec="sliced@0.0.5" args=["sliced@0.0.5",null]
195 verbose parsed url { protocol: null,
195 verbose parsed url   slashes: null,
195 verbose parsed url   auth: null,
195 verbose parsed url   host: null,
195 verbose parsed url   port: null,
195 verbose parsed url   hostname: null,
195 verbose parsed url   hash: null,
195 verbose parsed url   search: null,
195 verbose parsed url   query: null,
195 verbose parsed url   pathname: 'sliced@0.0.5',
195 verbose parsed url   path: 'sliced@0.0.5',
195 verbose parsed url   href: 'sliced@0.0.5' }
196 verbose cache add name="sliced" spec="0.0.5" args=["sliced","0.0.5"]
197 verbose parsed url { protocol: null,
197 verbose parsed url   slashes: null,
197 verbose parsed url   auth: null,
197 verbose parsed url   host: null,
197 verbose parsed url   port: null,
197 verbose parsed url   hostname: null,
197 verbose parsed url   hash: null,
197 verbose parsed url   search: null,
197 verbose parsed url   query: null,
197 verbose parsed url   pathname: '0.0.5',
197 verbose parsed url   path: '0.0.5',
197 verbose parsed url   href: '0.0.5' }
198 verbose addNamed [ 'sliced', '0.0.5' ]
199 verbose addNamed [ '0.0.5', '0.0.5' ]
200 silly lockFile 146acdb0-sliced-0-0-5 sliced@0.0.5
201 verbose lock sliced@0.0.5 /Users/douglasskiser/.npm/146acdb0-sliced-0-0-5.lock
202 verbose cache add [ 'muri@0.3.1', null ]
203 verbose cache add name=undefined spec="muri@0.3.1" args=["muri@0.3.1",null]
204 verbose parsed url { protocol: null,
204 verbose parsed url   slashes: null,
204 verbose parsed url   auth: null,
204 verbose parsed url   host: null,
204 verbose parsed url   port: null,
204 verbose parsed url   hostname: null,
204 verbose parsed url   hash: null,
204 verbose parsed url   search: null,
204 verbose parsed url   query: null,
204 verbose parsed url   pathname: 'muri@0.3.1',
204 verbose parsed url   path: 'muri@0.3.1',
204 verbose parsed url   href: 'muri@0.3.1' }
205 verbose cache add name="muri" spec="0.3.1" args=["muri","0.3.1"]
206 verbose parsed url { protocol: null,
206 verbose parsed url   slashes: null,
206 verbose parsed url   auth: null,
206 verbose parsed url   host: null,
206 verbose parsed url   port: null,
206 verbose parsed url   hostname: null,
206 verbose parsed url   hash: null,
206 verbose parsed url   search: null,
206 verbose parsed url   query: null,
206 verbose parsed url   pathname: '0.3.1',
206 verbose parsed url   path: '0.3.1',
206 verbose parsed url   href: '0.3.1' }
207 verbose addNamed [ 'muri', '0.3.1' ]
208 verbose addNamed [ '0.3.1', '0.3.1' ]
209 silly lockFile 01b66c9e-muri-0-3-1 muri@0.3.1
210 verbose lock muri@0.3.1 /Users/douglasskiser/.npm/01b66c9e-muri-0-3-1.lock
211 verbose cache add [ 'mpromise@0.4.3', null ]
212 verbose cache add name=undefined spec="mpromise@0.4.3" args=["mpromise@0.4.3",null]
213 verbose parsed url { protocol: null,
213 verbose parsed url   slashes: null,
213 verbose parsed url   auth: null,
213 verbose parsed url   host: null,
213 verbose parsed url   port: null,
213 verbose parsed url   hostname: null,
213 verbose parsed url   hash: null,
213 verbose parsed url   search: null,
213 verbose parsed url   query: null,
213 verbose parsed url   pathname: 'mpromise@0.4.3',
213 verbose parsed url   path: 'mpromise@0.4.3',
213 verbose parsed url   href: 'mpromise@0.4.3' }
214 verbose cache add name="mpromise" spec="0.4.3" args=["mpromise","0.4.3"]
215 verbose parsed url { protocol: null,
215 verbose parsed url   slashes: null,
215 verbose parsed url   auth: null,
215 verbose parsed url   host: null,
215 verbose parsed url   port: null,
215 verbose parsed url   hostname: null,
215 verbose parsed url   hash: null,
215 verbose parsed url   search: null,
215 verbose parsed url   query: null,
215 verbose parsed url   pathname: '0.4.3',
215 verbose parsed url   path: '0.4.3',
215 verbose parsed url   href: '0.4.3' }
216 verbose addNamed [ 'mpromise', '0.4.3' ]
217 verbose addNamed [ '0.4.3', '0.4.3' ]
218 silly lockFile 70229a2d-mpromise-0-4-3 mpromise@0.4.3
219 verbose lock mpromise@0.4.3 /Users/douglasskiser/.npm/70229a2d-mpromise-0-4-3.lock
220 verbose cache add [ 'mpath@0.1.1', null ]
221 verbose cache add name=undefined spec="mpath@0.1.1" args=["mpath@0.1.1",null]
222 verbose parsed url { protocol: null,
222 verbose parsed url   slashes: null,
222 verbose parsed url   auth: null,
222 verbose parsed url   host: null,
222 verbose parsed url   port: null,
222 verbose parsed url   hostname: null,
222 verbose parsed url   hash: null,
222 verbose parsed url   search: null,
222 verbose parsed url   query: null,
222 verbose parsed url   pathname: 'mpath@0.1.1',
222 verbose parsed url   path: 'mpath@0.1.1',
222 verbose parsed url   href: 'mpath@0.1.1' }
223 verbose cache add name="mpath" spec="0.1.1" args=["mpath","0.1.1"]
224 verbose parsed url { protocol: null,
224 verbose parsed url   slashes: null,
224 verbose parsed url   auth: null,
224 verbose parsed url   host: null,
224 verbose parsed url   port: null,
224 verbose parsed url   hostname: null,
224 verbose parsed url   hash: null,
224 verbose parsed url   search: null,
224 verbose parsed url   query: null,
224 verbose parsed url   pathname: '0.1.1',
224 verbose parsed url   path: '0.1.1',
224 verbose parsed url   href: '0.1.1' }
225 verbose addNamed [ 'mpath', '0.1.1' ]
226 verbose addNamed [ '0.1.1', '0.1.1' ]
227 silly lockFile 7ed304e1-mpath-0-1-1 mpath@0.1.1
228 verbose lock mpath@0.1.1 /Users/douglasskiser/.npm/7ed304e1-mpath-0-1-1.lock
229 verbose cache add [ 'regexp-clone@0.0.1', null ]
230 verbose cache add name=undefined spec="regexp-clone@0.0.1" args=["regexp-clone@0.0.1",null]
231 verbose parsed url { protocol: null,
231 verbose parsed url   slashes: null,
231 verbose parsed url   auth: null,
231 verbose parsed url   host: null,
231 verbose parsed url   port: null,
231 verbose parsed url   hostname: null,
231 verbose parsed url   hash: null,
231 verbose parsed url   search: null,
231 verbose parsed url   query: null,
231 verbose parsed url   pathname: 'regexp-clone@0.0.1',
231 verbose parsed url   path: 'regexp-clone@0.0.1',
231 verbose parsed url   href: 'regexp-clone@0.0.1' }
232 verbose cache add name="regexp-clone" spec="0.0.1" args=["regexp-clone","0.0.1"]
233 verbose parsed url { protocol: null,
233 verbose parsed url   slashes: null,
233 verbose parsed url   auth: null,
233 verbose parsed url   host: null,
233 verbose parsed url   port: null,
233 verbose parsed url   hostname: null,
233 verbose parsed url   hash: null,
233 verbose parsed url   search: null,
233 verbose parsed url   query: null,
233 verbose parsed url   pathname: '0.0.1',
233 verbose parsed url   path: '0.0.1',
233 verbose parsed url   href: '0.0.1' }
234 verbose addNamed [ 'regexp-clone', '0.0.1' ]
235 verbose addNamed [ '0.0.1', '0.0.1' ]
236 silly lockFile c8264751-regexp-clone-0-0-1 regexp-clone@0.0.1
237 verbose lock regexp-clone@0.0.1 /Users/douglasskiser/.npm/c8264751-regexp-clone-0-0-1.lock
238 verbose cache add [ 'mquery@0.5.3', null ]
239 verbose cache add name=undefined spec="mquery@0.5.3" args=["mquery@0.5.3",null]
240 verbose parsed url { protocol: null,
240 verbose parsed url   slashes: null,
240 verbose parsed url   auth: null,
240 verbose parsed url   host: null,
240 verbose parsed url   port: null,
240 verbose parsed url   hostname: null,
240 verbose parsed url   hash: null,
240 verbose parsed url   search: null,
240 verbose parsed url   query: null,
240 verbose parsed url   pathname: 'mquery@0.5.3',
240 verbose parsed url   path: 'mquery@0.5.3',
240 verbose parsed url   href: 'mquery@0.5.3' }
241 verbose cache add name="mquery" spec="0.5.3" args=["mquery","0.5.3"]
242 verbose parsed url { protocol: null,
242 verbose parsed url   slashes: null,
242 verbose parsed url   auth: null,
242 verbose parsed url   host: null,
242 verbose parsed url   port: null,
242 verbose parsed url   hostname: null,
242 verbose parsed url   hash: null,
242 verbose parsed url   search: null,
242 verbose parsed url   query: null,
242 verbose parsed url   pathname: '0.5.3',
242 verbose parsed url   path: '0.5.3',
242 verbose parsed url   href: '0.5.3' }
243 verbose addNamed [ 'mquery', '0.5.3' ]
244 verbose addNamed [ '0.5.3', '0.5.3' ]
245 silly lockFile ffcc360d-mquery-0-5-3 mquery@0.5.3
246 verbose lock mquery@0.5.3 /Users/douglasskiser/.npm/ffcc360d-mquery-0-5-3.lock
247 verbose url raw hooks/0.2.1
248 verbose url resolving [ 'https://registry.npmjs.org/', './hooks/0.2.1' ]
249 verbose url resolved https://registry.npmjs.org/hooks/0.2.1
250 info trying registry request attempt 1 at 21:33:41
251 verbose etag "B992DU4H9NHO20KAFX26DC59Q"
252 http GET https://registry.npmjs.org/hooks/0.2.1
253 verbose url raw mongodb/1.3.23
254 verbose url resolving [ 'https://registry.npmjs.org/', './mongodb/1.3.23' ]
255 verbose url resolved https://registry.npmjs.org/mongodb/1.3.23
256 info trying registry request attempt 1 at 21:33:41
257 verbose etag "8OEKL60N60J8NZVQZYZTZLCUF"
258 http GET https://registry.npmjs.org/mongodb/1.3.23
259 verbose url raw muri/0.3.1
260 verbose url resolving [ 'https://registry.npmjs.org/', './muri/0.3.1' ]
261 verbose url resolved https://registry.npmjs.org/muri/0.3.1
262 info trying registry request attempt 1 at 21:33:41
263 verbose etag "3MS3Q9403MWAFGUJ06USVDAQ0"
264 http GET https://registry.npmjs.org/muri/0.3.1
265 verbose url raw ms/0.1.0
266 verbose url resolving [ 'https://registry.npmjs.org/', './ms/0.1.0' ]
267 verbose url resolved https://registry.npmjs.org/ms/0.1.0
268 info trying registry request attempt 1 at 21:33:41
269 verbose etag "94E8GXUPQ4FNV7UL7FT8Y022L"
270 http GET https://registry.npmjs.org/ms/0.1.0
271 verbose url raw sliced/0.0.5
272 verbose url resolving [ 'https://registry.npmjs.org/', './sliced/0.0.5' ]
273 verbose url resolved https://registry.npmjs.org/sliced/0.0.5
274 info trying registry request attempt 1 at 21:33:41
275 verbose etag "C8VL86ZJUM1VV85NIR06SXFQL"
276 http GET https://registry.npmjs.org/sliced/0.0.5
277 verbose url raw mpromise/0.4.3
278 verbose url resolving [ 'https://registry.npmjs.org/', './mpromise/0.4.3' ]
279 verbose url resolved https://registry.npmjs.org/mpromise/0.4.3
280 info trying registry request attempt 1 at 21:33:41
281 verbose etag "A1BP57MZH3RM1LV2WFS1TX6MQ"
282 http GET https://registry.npmjs.org/mpromise/0.4.3
283 verbose url raw mpath/0.1.1
284 verbose url resolving [ 'https://registry.npmjs.org/', './mpath/0.1.1' ]
285 verbose url resolved https://registry.npmjs.org/mpath/0.1.1
286 info trying registry request attempt 1 at 21:33:41
287 verbose etag "5G0TVEQH1V2NL2RX1E5S6EPO"
288 http GET https://registry.npmjs.org/mpath/0.1.1
289 verbose url raw regexp-clone/0.0.1
290 verbose url resolving [ 'https://registry.npmjs.org/', './regexp-clone/0.0.1' ]
291 verbose url resolved https://registry.npmjs.org/regexp-clone/0.0.1
292 info trying registry request attempt 1 at 21:33:41
293 verbose etag "C8NQSMYL1B63ZTGKAOJSFPK85"
294 http GET https://registry.npmjs.org/regexp-clone/0.0.1
295 verbose url raw mquery/0.5.3
296 verbose url resolving [ 'https://registry.npmjs.org/', './mquery/0.5.3' ]
297 verbose url resolved https://registry.npmjs.org/mquery/0.5.3
298 info trying registry request attempt 1 at 21:33:41
299 verbose etag "7ENDMN8MXLKCYBT0DY49H2FRW"
300 http GET https://registry.npmjs.org/mquery/0.5.3
301 http 304 https://registry.npmjs.org/hooks/0.2.1
302 silly registry.get cb [ 304,
302 silly registry.get   { date: 'Mon, 03 Mar 2014 02:33:42 GMT',
302 silly registry.get     server: 'Apache',
302 silly registry.get     connection: 'Keep-Alive',
302 silly registry.get     'keep-alive': 'timeout=10, max=50',
302 silly registry.get     etag: '"B992DU4H9NHO20KAFX26DC59Q"',
302 silly registry.get     'cache-control': 'max-age=1',
302 silly registry.get     vary: 'Accept' } ]
303 verbose etag hooks/0.2.1 from cache
304 silly lockFile 207ce50b-hooks-0-2-1 hooks@0.2.1
305 silly lockFile 207ce50b-hooks-0-2-1 hooks@0.2.1
306 http 304 https://registry.npmjs.org/mongodb/1.3.23
307 silly registry.get cb [ 304,
307 silly registry.get   { date: 'Mon, 03 Mar 2014 02:33:42 GMT',
307 silly registry.get     server: 'Apache',
307 silly registry.get     connection: 'Keep-Alive',
307 silly registry.get     'keep-alive': 'timeout=10, max=50',
307 silly registry.get     etag: '"8OEKL60N60J8NZVQZYZTZLCUF"',
307 silly registry.get     'cache-control': 'max-age=1',
307 silly registry.get     vary: 'Accept' } ]
308 verbose etag mongodb/1.3.23 from cache
309 silly lockFile 130bb479-mongodb-1-3-23 mongodb@1.3.23
310 silly lockFile 130bb479-mongodb-1-3-23 mongodb@1.3.23
311 http 304 https://registry.npmjs.org/muri/0.3.1
312 silly registry.get cb [ 304,
312 silly registry.get   { date: 'Mon, 03 Mar 2014 02:33:42 GMT',
312 silly registry.get     server: 'Apache',
312 silly registry.get     connection: 'Keep-Alive',
312 silly registry.get     'keep-alive': 'timeout=10, max=50',
312 silly registry.get     etag: '"3MS3Q9403MWAFGUJ06USVDAQ0"',
312 silly registry.get     'cache-control': 'max-age=1',
312 silly registry.get     vary: 'Accept' } ]
313 verbose etag muri/0.3.1 from cache
314 http 304 https://registry.npmjs.org/ms/0.1.0
315 silly registry.get cb [ 304,
315 silly registry.get   { date: 'Mon, 03 Mar 2014 02:33:42 GMT',
315 silly registry.get     server: 'Apache',
315 silly registry.get     connection: 'Keep-Alive',
315 silly registry.get     'keep-alive': 'timeout=10, max=50',
315 silly registry.get     etag: '"94E8GXUPQ4FNV7UL7FT8Y022L"',
315 silly registry.get     'cache-control': 'max-age=1',
315 silly registry.get     vary: 'Accept' } ]
316 verbose etag ms/0.1.0 from cache
317 http 304 https://registry.npmjs.org/mpromise/0.4.3
318 silly registry.get cb [ 304,
318 silly registry.get   { date: 'Mon, 03 Mar 2014 02:33:42 GMT',
318 silly registry.get     server: 'Apache',
318 silly registry.get     connection: 'Keep-Alive',
318 silly registry.get     'keep-alive': 'timeout=10, max=49',
318 silly registry.get     etag: '"A1BP57MZH3RM1LV2WFS1TX6MQ"',
318 silly registry.get     'cache-control': 'max-age=1',
318 silly registry.get     vary: 'Accept' } ]
319 verbose etag mpromise/0.4.3 from cache
320 silly lockFile 9555626c-ms-0-1-0 ms@0.1.0
321 silly lockFile 9555626c-ms-0-1-0 ms@0.1.0
322 silly lockFile 01b66c9e-muri-0-3-1 muri@0.3.1
323 silly lockFile 01b66c9e-muri-0-3-1 muri@0.3.1
324 http 304 https://registry.npmjs.org/sliced/0.0.5
325 silly registry.get cb [ 304,
325 silly registry.get   { date: 'Mon, 03 Mar 2014 02:33:42 GMT',
325 silly registry.get     server: 'Apache',
325 silly registry.get     connection: 'Keep-Alive',
325 silly registry.get     'keep-alive': 'timeout=10, max=50',
325 silly registry.get     etag: '"C8VL86ZJUM1VV85NIR06SXFQL"',
325 silly registry.get     'cache-control': 'max-age=1',
325 silly registry.get     vary: 'Accept' } ]
326 verbose etag sliced/0.0.5 from cache
327 silly lockFile 70229a2d-mpromise-0-4-3 mpromise@0.4.3
328 silly lockFile 70229a2d-mpromise-0-4-3 mpromise@0.4.3
329 silly lockFile 146acdb0-sliced-0-0-5 sliced@0.0.5
330 silly lockFile 146acdb0-sliced-0-0-5 sliced@0.0.5
331 http 304 https://registry.npmjs.org/mpath/0.1.1
332 silly registry.get cb [ 304,
332 silly registry.get   { date: 'Mon, 03 Mar 2014 02:33:42 GMT',
332 silly registry.get     server: 'Apache',
332 silly registry.get     connection: 'Keep-Alive',
332 silly registry.get     'keep-alive': 'timeout=10, max=49',
332 silly registry.get     etag: '"5G0TVEQH1V2NL2RX1E5S6EPO"',
332 silly registry.get     'cache-control': 'max-age=1',
332 silly registry.get     vary: 'Accept' } ]
333 verbose etag mpath/0.1.1 from cache
334 silly lockFile 7ed304e1-mpath-0-1-1 mpath@0.1.1
335 silly lockFile 7ed304e1-mpath-0-1-1 mpath@0.1.1
336 http 304 https://registry.npmjs.org/regexp-clone/0.0.1
337 silly registry.get cb [ 304,
337 silly registry.get   { date: 'Mon, 03 Mar 2014 02:33:42 GMT',
337 silly registry.get     server: 'Apache',
337 silly registry.get     connection: 'Keep-Alive',
337 silly registry.get     'keep-alive': 'timeout=10, max=49',
337 silly registry.get     etag: '"C8NQSMYL1B63ZTGKAOJSFPK85"',
337 silly registry.get     'cache-control': 'max-age=1',
337 silly registry.get     vary: 'Accept' } ]
338 verbose etag regexp-clone/0.0.1 from cache
339 silly lockFile c8264751-regexp-clone-0-0-1 regexp-clone@0.0.1
340 silly lockFile c8264751-regexp-clone-0-0-1 regexp-clone@0.0.1
341 http 304 https://registry.npmjs.org/mquery/0.5.3
342 silly registry.get cb [ 304,
342 silly registry.get   { date: 'Mon, 03 Mar 2014 02:33:42 GMT',
342 silly registry.get     server: 'Apache',
342 silly registry.get     connection: 'Keep-Alive',
342 silly registry.get     'keep-alive': 'timeout=10, max=49',
342 silly registry.get     etag: '"7ENDMN8MXLKCYBT0DY49H2FRW"',
342 silly registry.get     'cache-control': 'max-age=1',
342 silly registry.get     vary: 'Accept' } ]
343 verbose etag mquery/0.5.3 from cache
344 silly lockFile ffcc360d-mquery-0-5-3 mquery@0.5.3
345 silly lockFile ffcc360d-mquery-0-5-3 mquery@0.5.3
346 silly resolved [ { name: 'hooks',
346 silly resolved     description: 'Adds pre and post hook functionality to your JavaScript methods.',
346 silly resolved     version: '0.2.1',
346 silly resolved     keywords: [ 'node', 'hooks', 'middleware', 'pre', 'post' ],
346 silly resolved     homepage: 'https://github.com/bnoguchi/hooks-js/',
346 silly resolved     repository: { type: 'git', url: 'git://github.com/bnoguchi/hooks-js.git' },
346 silly resolved     author:
346 silly resolved      { name: 'Brian Noguchi',
346 silly resolved        email: 'brian.noguchi@gmail.com',
346 silly resolved        url: 'https://github.com/bnoguchi/' },
346 silly resolved     main: './hooks.js',
346 silly resolved     directories: { lib: '.' },
346 silly resolved     scripts: { test: 'make test' },
346 silly resolved     dependencies: {},
346 silly resolved     devDependencies: { expresso: '>=0.7.6', should: '>=0.2.1', underscore: '>=1.1.4' },
346 silly resolved     engines: { node: '>=0.4.0' },
346 silly resolved     licenses: [ 'MIT' ],
346 silly resolved     optionalDependencies: {},
346 silly resolved     readme: 'hooks\n============\n\nAdd pre and post middleware hooks to your JavaScript methods.\n\n## Installation\n    npm install hooks\n\n## Motivation\nSuppose you have a JavaScript object with a `save` method.\n\nIt would be nice to be able to declare code that runs before `save` and after `save`.\nFor example, you might want to run validation code before every `save`,\nand you might want to dispatch a job to a background job queue after `save`.\n\nOne might have an urge to hard code this all into `save`, but that turns out to\ncouple all these pieces of functionality (validation, save, and job creation) more\ntightly than is necessary. For example, what if someone does not want to do background\njob creation after the logical save? \n\nIt is nicer to tack on functionality using what we call `pre` and `post` hooks. These\nare functions that you define and that you direct to execute before or after particular\nmethods.\n\n## Example\nWe can use `hooks` to add validation and background jobs in the following way:\n\n    var hooks = require(\'hooks\')\n      , Document = require(\'./path/to/some/document/constructor\');\n\n    // Add hooks\' methods: `hook`, `pre`, and `post`    \n    for (var k in hooks) {\n      Document[k] = hooks[k];\n    }\n\n    // Define a new method that is able to invoke pre and post middleware\n    Document.hook(\'save\', Document.prototype.save);\n\n    // Define a middleware function to be invoked before \'save\'\n    Document.pre(\'save\', function validate (next) {\n      // The `this` context inside of `pre` and `post` functions\n      // is the Document instance\n      if (this.isValid()) next();      // next() passes control to the next middleware\n                                       // or to the target method itself\n      else next(new Error("Invalid")); // next(error) invokes an error callback\n    });\n\n    // Define a middleware function to be invoked after \'save\'\n    Document.post(\'save\', function createJob () {\n      this.sendToBackgroundQueue();\n    });\n\nIf you already have defined `Document.prototype` methods for which you want pres and posts,\nthen you do not need to explicitly invoke `Document.hook(...)`. Invoking `Document.pre(methodName, fn)`\nor `Document.post(methodName, fn)` will automatically and lazily change `Document.prototype[methodName]`\nso that it plays well with `hooks`. An equivalent way to implement the previous example is:\n\n```javascript\nvar hooks = require(\'hooks\')\n  , Document = require(\'./path/to/some/document/constructor\');\n\n// Add hooks\' methods: `hook`, `pre`, and `post`    \nfor (var k in hooks) {\n  Document[k] = hooks[k];\n}\n\nDocument.prototype.save = function () {\n  // ...\n};\n\n// Define a middleware function to be invoked before \'save\'\nDocument.pre(\'save\', function validate (next) {\n  // The `this` context inside of `pre` and `post` functions\n  // is the Document instance\n  if (this.isValid()) next();      // next() passes control to the next middleware\n                                   // or to the target method itself\n  else next(new Error("Invalid")); // next(error) invokes an error callback\n});\n\n// Define a middleware function to be invoked after \'save\'\nDocument.post(\'save\', function createJob () {\n  this.sendToBackgroundQueue();\n});\n```\n\n## Pres and Posts as Middleware\nWe structure pres and posts as middleware to give you maximum flexibility:\n\n1. You can define **multiple** pres (or posts) for a single method.\n2. These pres (or posts) are then executed as a chain of methods.\n3. Any functions in this middleware chain can choose to halt the chain\'s execution by `next`ing an Error from that middleware function. If this occurs, then none of the other middleware in the chain will execute, and the main method (e.g., `save`) will not execute. This is nice, for example, when we don\'t want a document to save if it is invalid.\n\n## Defining multiple pres (or posts)\n`pre` is chainable, so you can define multiple pres via:\n    Document.pre(\'save\', function (next, halt) {\n      console.log("hello");\n    }).pre(\'save\', function (next, halt) {\n      console.log("world");\n    });\n\nAs soon as one pre finishes executing, the next one will be invoked, and so on.\n\n## Error Handling\nYou can define a default error handler by passing a 2nd function as the 3rd argument to `hook`:\n    Document.hook(\'set\', function (path, val) {\n      this[path] = val;\n    }, function (err) {\n      // Handler the error here\n      console.error(err);\n    });\n\nThen, we can pass errors to this handler from a pre or post middleware function:\n    Document.pre(\'set\', function (next, path, val) {\n      next(new Error());\n    });\n\nIf you do not set up a default handler, then `hooks` makes the default handler that just throws the `Error`.\n\nThe default error handler can be over-rided on a per method invocation basis.\n\nIf the main method that you are surrounding with pre and post middleware expects its last argument to be a function\nwith callback signature `function (error, ...)`, then that callback becomes the error handler, over-riding the default\nerror handler you may have set up.\n   \n```javascript\nDocument.hook(\'save\', function (callback) {\n  // Save logic goes here\n  ...\n});\n\nvar doc = new Document();\ndoc.save( function (err, saved) {\n  // We can pass err via `next` in any of our pre or post middleware functions\n  if (err) console.error(err);\n  \n  // Rest of callback logic follows ...\n});\n```\n\n## Mutating Arguments via Middleware\n`pre` and `post` middleware can also accept the intended arguments for the method\nthey augment. This is useful if you want to mutate the arguments before passing\nthem along to the next middleware and eventually pass a mutated arguments list to\nthe main method itself.\n\nAs a simple example, let\'s define a method `set` that just sets a key, value pair.\nIf we want to namespace the key, we can do so by adding a `pre` middleware hook\nthat runs before `set`, alters the arguments by namespacing the `key` argument, and passes them onto `set`:\n\n    Document.hook(\'set\', function (key, val) {\n      this[key] = val;\n    });\n    Document.pre(\'set\', function (next, key, val) {\n      next(\'namespace-\' + key, val);\n    });\n    var doc = new Document();\n    doc.set(\'hello\', \'world\');\n    console.log(doc.hello); // undefined\n    console.log(doc[\'namespace-hello\']); // \'world\'\n\nAs you can see above, we pass arguments via `next`.\n\nIf you are not mutating the arguments, then you can pass zero arguments\nto `next`, and the next middleware function will still have access\nto the arguments.\n\n    Document.hook(\'set\', function (key, val) {\n      this[key] = val;\n    });\n    Document.pre(\'set\', function (next, key, val) {\n      // I have access to key and val here\n      next(); // We don\'t need to pass anything to next\n    });\n    Document.pre(\'set\', function (next, key, val) {\n      // And I still have access to the original key and val here\n      next();\n    });\n\nFinally, you can add arguments that downstream middleware can also see:\n\n    // Note that in the definition of `set`, there is no 3rd argument, options\n    Document.hook(\'set\', function (key, val) {\n      // But...\n      var options = arguments[2]; // ...I have access to an options argument\n                                  // because of pre function pre2 (defined below)\n      console.log(options); // \'{debug: true}\'\n      this[key] = val;\n    });\n    Document.pre(\'set\', function pre1 (next, key, val) {\n      // I only have access to key and val arguments\n      console.log(arguments.length); // 3\n      next(key, val, {debug: true});\n    });\n    Document.pre(\'set\', function pre2 (next, key, val, options) {\n      console.log(arguments.length); // 4\n      console.log(options); // \'{ debug: true}\'\n      next();\n    });\n    Document.pre(\'set\', function pre3 (next, key, val, options) {\n      // I still have access to key, val, AND the options argument introduced via the preceding middleware\n      console.log(arguments.length); // 4\n      console.log(options); // \'{ debug: true}\'\n      next();\n    });\n    \n    var doc = new Document()\n    doc.set(\'hey\', \'there\');\n\n## Parallel `pre` middleware\n\nAll middleware up to this point has been "serial" middleware -- i.e., middleware whose logic\nis executed as a serial chain.\n\nSome scenarios call for parallel middleware -- i.e., middleware that can wait for several\nasynchronous services at once to respond.\n\nFor instance, you may only want to save a Document only after you have checked\nthat the Document is valid according to two different remote services.\n\nWe accomplish asynchronous middleware by adding a second kind of flow control callback\n(the only flow control callback so far has been `next`), called `done`.\n\n- `next` passes control to the next middleware in the chain\n- `done` keeps track of how many parallel middleware have invoked `done` and passes\n   control to the target method when ALL parallel middleware have invoked `done`. If\n   you pass an `Error` to `done`, then the error is handled, and the main method that is\n   wrapped by pres and posts will not get invoked.\n\nWe declare pre middleware that is parallel by passing a 3rd boolean argument to our `pre`\ndefinition method.\n\nWe illustrate via the parallel validation example mentioned above:\n\n    Document.hook(\'save\', function targetFn (callback) {\n      // Save logic goes here\n      // ...\n      // This only gets run once the two `done`s are both invoked via preOne and preTwo.\n    });\n\n                         // true marks this as parallel middleware\n    Document.pre(\'save\', true, function preOne (next, doneOne, callback) {\n      remoteServiceOne.validate(this.serialize(), function (err, isValid) {\n        // The code in here will probably be run after the `next` below this block\n        // and could possibly be run after the console.log("Hola") in `preTwo\n        if (err) return doneOne(err);\n        if (isValid) doneOne();\n      });\n      next(); // Pass control to the next middleware\n    });\n    \n    // We will suppose that we need 2 different remote services to validate our document\n    Document.pre(\'save\', true, function preTwo (next, doneTwo, callback) {\n      remoteServiceTwo.validate(this.serialize(), function (err, isValid) {\n        if (err) return doneTwo(err);\n        if (isValid) doneTwo();\n      });\n      next();\n    });\n    \n    // While preOne and preTwo are parallel, preThree is a serial pre middleware\n    Document.pre(\'save\', function preThree (next, callback) {\n      next();\n    });\n    \n    var doc = new Document();\n    doc.save( function (err, doc) {\n      // Do stuff with the saved doc here...\n    });\n\nIn the above example, flow control may happen in the following way:\n\n(1) doc.save -> (2) preOne --(next)--> (3) preTwo --(next)--> (4) preThree --(next)--> (wait for dones to invoke) -> (5) doneTwo -> (6) doneOne -> (7) targetFn\n\nSo what\'s happening is that:\n\n1. You call `doc.save(...)`\n2. First, your preOne middleware gets executed. It makes a remote call to the validation service and `next()`s to the preTwo middleware.\n3. Now, your preTwo middleware gets executed. It makes a remote call to another validation service and `next()`s to the preThree middleware.\n4. Your preThree middleware gets executed. It immediately `next()`s. But nothing else gets executing until both `doneOne` and `doneTwo` are invoked inside the callbacks handling the response from the two valiation services.\n5. We will suppose that validation remoteServiceTwo returns a response to us first. In this case, we call `doneTwo` inside the callback to remoteServiceTwo.\n6. Some fractions of a second later, remoteServiceOne returns a response to us. In this case, we call `doneOne` inside the callback to remoteServiceOne.\n7. `hooks` implementation keeps track of how many parallel middleware has been defined per target function. It detects that both asynchronous pre middlewares (`preOne` and `preTwo`) have finally called their `done` functions (`doneOne` and `doneTwo`), so the implementation finally invokes our `targetFn` (i.e., our core `save` business logic).\n\n## Removing Pres\n\nYou can remove a particular pre associated with a hook:\n\n    Document.pre(\'set\', someFn);\n    Document.removePre(\'set\', someFn);\n\nAnd you can also remove all pres associated with a hook:\n    Document.removePre(\'set\'); // Removes all declared `pre`s on the hook \'set\'\n\n## Tests\nTo run the tests:\n    make test\n\n### Contributors\n- [Brian Noguchi](https://github.com/bnoguchi)\n\n### License\nMIT License\n\n---\n### Author\nBrian Noguchi\n',
346 silly resolved     readmeFilename: 'README.md',
346 silly resolved     bugs: { url: 'https://github.com/bnoguchi/hooks-js/issues' },
346 silly resolved     _id: 'hooks@0.2.1',
346 silly resolved     _from: 'hooks@0.2.1' },
346 silly resolved   { name: 'mongodb',
346 silly resolved     description: 'A node.js driver for MongoDB',
346 silly resolved     keywords: [ 'mongodb', 'mongo', 'driver', 'db' ],
346 silly resolved     version: '1.3.23',
346 silly resolved     author: { name: 'Christian Amor Kvalheim', email: 'christkv@gmail.com' },
346 silly resolved     contributors:
346 silly resolved      [ [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object],
346 silly resolved        [Object] ],
346 silly resolved     repository:
346 silly resolved      { type: 'git',
346 silly resolved        url: 'http://github.com/mongodb/node-mongodb-native.git' },
346 silly resolved     bugs: { url: 'http://github.com/mongodb/node-mongodb-native/issues' },
346 silly resolved     dependencies: { bson: '0.2.5', kerberos: '0.0.3' },
346 silly resolved     devDependencies:
346 silly resolved      { dox: '0.4.4',
346 silly resolved        'uglify-js': '1.2.5',
346 silly resolved        ejs: '0.6.1',
346 silly resolved        request: '2.12.0',
346 silly resolved        nodeunit: '0.7.4',
346 silly resolved        markdown: '0.3.1',
346 silly resolved        gleak: '0.2.3',
346 silly resolved        step: '0.0.5',
346 silly resolved        async: '0.1.22',
346 silly resolved        integra: 'latest',
346 silly resolved        optimist: 'latest' },
346 silly resolved     optionalDependencies: { kerberos: '0.0.3' },
346 silly resolved     config: { native: false },
346 silly resolved     main: './lib/mongodb/index',
346 silly resolved     homepage: 'http://mongodb.github.com/node-mongodb-native/',
346 silly resolved     directories: { lib: './lib/mongodb' },
346 silly resolved     engines: { node: '>=0.6.19' },
346 silly resolved     scripts: { test: 'make test_functional' },
346 silly resolved     licenses: [ [Object] ],
346 silly resolved     readme: '## MongoDB Node.JS Driver\n \n| what          | where                                          |\n|---------------|------------------------------------------------|\n| documentation | http://mongodb.github.io/node-mongodb-native/  |\n| apidoc        | http://mongodb.github.io/node-mongodb-native/  |\n| source        | https://github.com/mongodb/node-mongodb-native |\n| mongodb       | http://www.mongodb.org/                        |\n\n### Bugs / Feature Requests\n\nThink you’ve found a bug? Want to see a new feature in PyMongo? Please open a\ncase in our issue management tool, JIRA:\n\n- Create an account and login <https://jira.mongodb.org>.\n- Navigate to the NODE project <https://jira.mongodb.org/browse/NODE>.\n- Click **Create Issue** - Please provide as much information as possible about the issue type and how to reproduce it.\n\nBug reports in JIRA for all driver projects (i.e. NODE, PYTHON, CSHARP, JAVA) and the\nCore Server (i.e. SERVER) project are **public**.\n\n### Questions and Bug Reports\n\n * mailing list: https://groups.google.com/forum/#!forum/node-mongodb-native\n * jira: http://jira.mongodb.org/\n\n### Change Log\n\nhttp://jira.mongodb.org/browse/NODE\n\n## Install\n\nTo install the most recent release from npm, run:\n\n    npm install mongodb\n\nThat may give you a warning telling you that bugs[\'web\'] should be bugs[\'url\'], it would be safe to ignore it (this has been fixed in the development version)\n\nTo install the latest from the repository, run::\n\n    npm install path/to/node-mongodb-native\n\n## Live Examples\n<a href="https://runnable.com/node-mongodb-native" target="_blank"><img src="https://runnable.com/external/styles/assets/runnablebtn.png" style="width:67px;height:25px;"></a>\n\n## Introduction\n\nThis is a node.js driver for MongoDB. It\'s a port (or close to a port) of the library for ruby at http://github.com/mongodb/mongo-ruby-driver/.\n\nA simple example of inserting a document.\n\n```javascript\n  var MongoClient = require(\'mongodb\').MongoClient\n    , format = require(\'util\').format;\n\n  MongoClient.connect(\'mongodb://127.0.0.1:27017/test\', function(err, db) {\n    if(err) throw err;\n\n    var collection = db.collection(\'test_insert\');\n    collection.insert({a:2}, function(err, docs) {\n      \n      collection.count(function(err, count) {\n        console.log(format("count = %s", count));\n      });\n\n      // Locate all the entries using find\n      collection.find().toArray(function(err, results) {\n        console.dir(results);\n        // Let\'s close the db\n        db.close();\n      });\n    });\n  })\n```\n\n## Data types\n\nTo store and retrieve the non-JSON MongoDb primitives ([ObjectID](http://www.mongodb.org/display/DOCS/Object+IDs), Long, Binary, [Timestamp](http://www.mongodb.org/display/DOCS/Timestamp+data+type), [DBRef](http://www.mongodb.org/display/DOCS/Database+References#DatabaseReferences-DBRef), Code).\n\nIn particular, every document has a unique `_id` which can be almost any type, and by default a 12-byte ObjectID is created. ObjectIDs can be represented as 24-digit hexadecimal strings, but you must convert the string back into an ObjectID before you can use it in the database. For example:\n\n```javascript\n  // Get the objectID type\n  var ObjectID = require(\'mongodb\').ObjectID;\n\n  var idString = \'4e4e1638c85e808431000003\';\n  collection.findOne({_id: new ObjectID(idString)}, console.log)  // ok\n  collection.findOne({_id: idString}, console.log)  // wrong! callback gets undefined\n```\n\nHere are the constructors the non-Javascript BSON primitive types:\n\n```javascript\n  // Fetch the library\n  var mongo = require(\'mongodb\');\n  // Create new instances of BSON types\n  new mongo.Long(numberString)\n  new mongo.ObjectID(hexString)\n  new mongo.Timestamp()  // the actual unique number is generated on insert.\n  new mongo.DBRef(collectionName, id, dbName)\n  new mongo.Binary(buffer)  // takes a string or Buffer\n  new mongo.Code(code, [context])\n  new mongo.Symbol(string)\n  new mongo.MinKey()\n  new mongo.MaxKey()\n  new mongo.Double(number)\t// Force double storage\n```\n\n### The C/C++ bson parser/serializer\n\nIf you are running a version of this library has the C/C++ parser compiled, to enable the driver to use the C/C++ bson parser pass it the option native_parser:true like below\n\n```javascript\n  // using native_parser:\n  MongoClient.connect(\'mongodb://127.0.0.1:27017/test\'\n    , {db: {native_parser: true}}, function(err, db) {})\n```\n\nThe C++ parser uses the js objects both for serialization and deserialization.\n\n## GitHub information\n\nThe source code is available at http://github.com/mongodb/node-mongodb-native.\nYou can either clone the repository or download a tarball of the latest release.\n\nOnce you have the source you can test the driver by running\n\n    $ make test\n\nin the main directory. You will need to have a mongo instance running on localhost for the integration tests to pass.\n\n## Examples\n\nFor examples look in the examples/ directory. You can execute the examples using node.\n\n    $ cd examples\n    $ node queries.js\n\n## GridStore\n\nThe GridStore class allows for storage of binary files in mongoDB using the mongoDB defined files and chunks collection definition.\n\nFor more information have a look at [Gridstore](https://github.com/mongodb/node-mongodb-native/blob/master/docs/gridfs.md)\n\n## Replicasets\n\nFor more information about how to connect to a replicaset have a look at the extensive documentation [Documentation](http://mongodb.github.com/node-mongodb-native/)\n\n### Primary Key Factories\n\nDefining your own primary key factory allows you to generate your own series of id\'s\n(this could f.ex be to use something like ISBN numbers). The generated the id needs to be a 12 byte long "string".\n\nSimple example below\n\n```javascript\n  var MongoClient = require(\'mongodb\').MongoClient\n    , format = require(\'util\').format;    \n\n  // Custom factory (need to provide a 12 byte array);\n  CustomPKFactory = function() {}\n  CustomPKFactory.prototype = new Object();\n  CustomPKFactory.createPk = function() {\n    return new ObjectID("aaaaaaaaaaaa");\n  }\n\n  MongoClient.connect(\'mongodb://127.0.0.1:27017/test\', function(err, db) {\n    if(err) throw err;\n\n    db.dropDatabase(function(err, done) {\n      \n      db.createCollection(\'test_custom_key\', function(err, collection) {\n        \n        collection.insert({\'a\':1}, function(err, docs) {\n          \n          collection.find({\'_id\':new ObjectID("aaaaaaaaaaaa")}).toArray(function(err, items) {\n            console.dir(items);\n            // Let\'s close the db\n            db.close();\n          });\n        });\n      });\n    });\n  });\n```\n\n## Documentation\n\nIf this document doesn\'t answer your questions, see the source of\n[Collection](https://github.com/mongodb/node-mongodb-native/blob/master/lib/mongodb/collection.js)\nor [Cursor](https://github.com/mongodb/node-mongodb-native/blob/master/lib/mongodb/cursor.js),\nor the documentation at MongoDB for query and update formats.\n\n### Find\n\nThe find method is actually a factory method to create\nCursor objects. A Cursor lazily uses the connection the first time\nyou call `nextObject`, `each`, or `toArray`.\n\nThe basic operation on a cursor is the `nextObject` method\nthat fetches the next matching document from the database. The convenience\nmethods `each` and `toArray` call `nextObject` until the cursor is exhausted.\n\nSignatures:\n\n```javascript\n  var cursor = collection.find(query, [fields], options);\n  cursor.sort(fields).limit(n).skip(m).\n\n  cursor.nextObject(function(err, doc) {});\n  cursor.each(function(err, doc) {});\n  cursor.toArray(function(err, docs) {});\n\n  cursor.rewind()  // reset the cursor to its initial state.\n```\n\nUseful chainable methods of cursor. These can optionally be options of `find` instead of method calls:\n\n  * `.limit(n).skip(m)` to control paging.\n  * `.sort(fields)` Order by the given fields. There are several equivalent syntaxes:\n  * `.sort({field1: -1, field2: 1})` descending by field1, then ascending by field2.\n  * `.sort([[\'field1\', \'desc\'], [\'field2\', \'asc\']])` same as above\n  * `.sort([[\'field1\', \'desc\'], \'field2\'])` same as above\n  * `.sort(\'field1\')` ascending by field1\n\nOther options of `find`:\n\n* `fields` the fields to fetch (to avoid transferring the entire document)\n* `tailable` if true, makes the cursor [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors).\n* `batchSize` The number of the subset of results to request the database\nto return for every request. This should initially be greater than 1 otherwise\nthe database will automatically close the cursor. The batch size can be set to 1\nwith `batchSize(n, function(err){})` after performing the initial query to the database.\n* `hint` See [Optimization: hint](http://www.mongodb.org/display/DOCS/Optimization#Optimization-Hint).\n* `explain` turns this into an explain query. You can also call\n`explain()` on any cursor to fetch the explanation.\n* `snapshot` prevents documents that are updated while the query is active\nfrom being returned multiple times. See more\n[details about query snapshots](http://www.mongodb.org/display/DOCS/How+to+do+Snapshotted+Queries+in+the+Mongo+Database).\n* `timeout` if false, asks MongoDb not to time out this cursor after an\ninactivity period.\n\nFor information on how to create queries, see the\n[MongoDB section on querying](http://www.mongodb.org/display/DOCS/Querying).\n\n```javascript\n  var MongoClient = require(\'mongodb\').MongoClient\n    , format = require(\'util\').format;    \n\n  MongoClient.connect(\'mongodb://127.0.0.1:27017/test\', function(err, db) {\n    if(err) throw err;\n\n    var collection = db\n      .collection(\'test\')\n      .find({})\n      .limit(10)\n      .toArray(function(err, docs) {\n        console.dir(docs);\n    });\n  });\n```\n\n### Insert\n\nSignature:\n\n```javascript\n  collection.insert(docs, options, [callback]);\n```\n\nwhere `docs` can be a single document or an array of documents.\n\nUseful options:\n\n* `safe:true` Should always set if you have a callback.\n\nSee also: [MongoDB docs for insert](http://www.mongodb.org/display/DOCS/Inserting).\n\n```javascript\n  var MongoClient = require(\'mongodb\').MongoClient\n    , format = require(\'util\').format;    \n\n  MongoClient.connect(\'mongodb://127.0.0.1:27017/test\', function(err, db) {\n    if(err) throw err;\n    \n    db.collection(\'test\').insert({hello: \'world\'}, {w:1}, function(err, objects) {\n      if (err) console.warn(err.message);\n      if (err && err.message.indexOf(\'E11000 \') !== -1) {\n        // this _id was already inserted in the database\n      }\n    });\n  });\n```\n\nNote that there\'s no reason to pass a callback to the insert or update commands\nunless you use the `safe:true` option. If you don\'t specify `safe:true`, then\nyour callback will be called immediately.\n\n### Update: update and insert (upsert)\n\nThe update operation will update the first document that matches your query\n(or all documents that match if you use `multi:true`).\nIf `safe:true`, `upsert` is not set, and no documents match, your callback will return 0 documents updated.\n\nSee the [MongoDB docs](http://www.mongodb.org/display/DOCS/Updating) for\nthe modifier (`$inc`, `$set`, `$push`, etc.) formats.\n\nSignature:\n\n```javascript\n  collection.update(criteria, objNew, options, [callback]);\n```\n\nUseful options:\n\n* `safe:true` Should always set if you have a callback.\n* `multi:true` If set, all matching documents are updated, not just the first.\n* `upsert:true` Atomically inserts the document if no documents matched.\n\nExample for `update`:\n\n```javascript\n  var MongoClient = require(\'mongodb\').MongoClient\n    , format = require(\'util\').format;    \n\n  MongoClient.connect(\'mongodb://127.0.0.1:27017/test\', function(err, db) {\n    if(err) throw err;\n\n    db.collection(\'test\').update({hi: \'here\'}, {$set: {hi: \'there\'}}, {w:1}, function(err) {\n      if (err) console.warn(err.message);\n      else console.log(\'successfully updated\');\n    });\n  });\n```\n\n### Find and modify\n\n`findAndModify` is like `update`, but it also gives the updated document to\nyour callback. But there are a few key differences between findAndModify and\nupdate:\n\n  1. The signatures differ.\n  2. You can only findAndModify a single item, not multiple items.\n\nSignature:\n\n```javascript\n    collection.findAndModify(query, sort, update, options, callback)\n```\n\nThe sort parameter is used to specify which object to operate on, if more than\none document matches. It takes the same format as the cursor sort (see\nConnection.find above).\n\nSee the\n[MongoDB docs for findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command)\nfor more details.\n\nUseful options:\n\n* `remove:true` set to a true to remove the object before returning\n* `new:true` set to true if you want to return the modified object rather than the original. Ignored for remove.\n* `upsert:true` Atomically inserts the document if no documents matched.\n\nExample for `findAndModify`:\n\n```javascript\n  var MongoClient = require(\'mongodb\').MongoClient\n    , format = require(\'util\').format;    \n\n  MongoClient.connect(\'mongodb://127.0.0.1:27017/test\', function(err, db) {\n    if(err) throw err;\n    db.collection(\'test\').findAndModify({hello: \'world\'}, [[\'_id\',\'asc\']], {$set: {hi: \'there\'}}, {}, function(err, object) {\n      if (err) console.warn(err.message);\n      else console.dir(object);  // undefined if no matching object exists.\n    });\n  });\n```\n\n### Save\n\nThe `save` method is a shorthand for upsert if the document contains an\n`_id`, or an insert if there is no `_id`.\n\n## Release Notes\n\nSee HISTORY\n\n## Credits\n\n1. [10gen](http://github.com/mongodb/mongo-ruby-driver/)\n2. [Google Closure Library](http://code.google.com/closure/library/)\n3. [Jonas Raoni Soares Silva](http://jsfromhell.com/classes/binary-parser)\n\n## Contributors\n\nAaron Heckmann, Christoph Pojer, Pau Ramon Revilla, Nathan White, Emmerman, Seth LaForge, Boris Filipov, Stefan Schärmeli, Tedde Lundgren, renctan, Sergey Ukustov, Ciaran Jessup, kuno, srimonti, Erik Abele, Pratik Daga, Slobodan Utvic, Kristina Chodorow, Yonathan Randolph, Brian Noguchi, Sam Epstein, James Harrison Fisher, Vladimir Dronnikov, Ben Hockey, Henrik Johansson, Simon Weare, Alex Gorbatchev, Shimon Doodkin, Kyle Mueller, Eran Hammer-Lahav, Marcin Ciszak, François de Metz, Vinay Pulim, nstielau, Adam Wiggins, entrinzikyl, Jeremy Selier, Ian Millington, Public Keating, andrewjstone, Christopher Stott, Corey Jewett, brettkiefer, Rob Holland, Senmiao Liu, heroic, gitfy\n\n## License\n\n Copyright 2009 - 2013 MongoDb Inc.\n\n   Licensed under the Apache License, Version 2.0 (the "License");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an "AS IS" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n',
346 silly resolved     readmeFilename: 'Readme.md',
346 silly resolved     _id: 'mongodb@1.3.23',
346 silly resolved     _from: 'mongodb@1.3.23' },
346 silly resolved   { name: 'ms',
346 silly resolved     version: '0.1.0',
346 silly resolved     description: 'Tiny ms conversion utility',
346 silly resolved     main: './ms',
346 silly resolved     devDependencies: { mocha: '*', 'expect.js': '*', serve: '*' },
346 silly resolved     readme: '\n# ms.js\n\nEver find yourself doing math in your head or writing `1000 * 60 * 60 …`?\nDon\'t want to add obstrusive `Number` prototype extensions to your reusable\n/ distributable modules and projects?\n\n`ms` is a tiny utility that you can leverage when your application needs to\naccept a number of miliseconds as a parameter.\n\nIf a number is supplied to `ms`, it returns it immediately (e.g:\nIf a string that contains the number is supplied, it returns it immediately as\na number (e.g: it returns `100` for `\'100\'`).\n\nHowever, if you pass a string with a number and a valid unit, hte number of\nequivalent ms is returned.\n\n```js\nms(\'1d\')      // 86400000\nms(\'10h\')     // 36000000\nms(\'2h\')      // 7200000\nms(\'1m\')      // 60000\nms(\'5ms\')     // 5000\nms(\'100\')     // \'100\'\nms(100)       // 100\n```\n\n## How to use\n\n### Node\n\n```js\nrequire(\'ms\')\n```\n\n### Browser\n\n```html\n<script src="ms.js"></script>\n```\n\n## Credits\n\n(The MIT License)\n\nCopyright (c) 2011 Guillermo Rauch &lt;guillermo@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
346 silly resolved     readmeFilename: 'README.md',
346 silly resolved     _id: 'ms@0.1.0',
346 silly resolved     _from: 'ms@0.1.0' },
346 silly resolved   { name: 'muri',
346 silly resolved     version: '0.3.1',
346 silly resolved     description: 'MongoDB URI parser',
346 silly resolved     main: 'index.js',
346 silly resolved     scripts: { test: 'make test' },
346 silly resolved     repository: { type: 'git', url: 'git://github.com/aheckmann/muri.git' },
346 silly resolved     keywords: [ 'mongodb', 'uri', 'parser' ],
346 silly resolved     author:
346 silly resolved      { name: 'Aaron Heckmann',
346 silly resolved        email: 'aaron.heckmann+github@gmail.com' },
346 silly resolved     license: 'MIT',
346 silly resolved     devDependencies: { mocha: '1.6.0' },
346 silly resolved     readme: '#Meet Muri!\n\nMuri is your friendly neighborhood [MongoDB URI](http://www.mongodb.org/display/DOCS/Connections) parser for Node.js.\n\n\n###Install\n\n    $ npm install muri\n\n###Use\n\n```js\n var muri = require(\'muri\');\n var o = muri(\'mongodb://user:pass@local,remote:27018,japan:27019/neatdb?replicaSet=myreplset&journal=true&w=2&wtimeoutMS=50\');\n\n console.log(o);\n\n { hosts: [ { host: \'local\',  port: 27017 },\n            { host: \'remote\', port: 27018 },\n            { host: \'japan\',  port: 27019 } ],\n   db: \'neatdb\',\n   options: {\n     replicaSet: \'myreplset\',\n     journal: true,\n     w: 2,\n     wtimeoutMS: 50\n   },\n   auth: {\n     user: \'user\',\n     pass: \'pass\'\n   }\n }\n```\n\n### Details\n\nThe returned object contains the following properties:\n\n- db: the name of the database. defaults to "admin" if not specified\n- auth: if auth is specified, this object will exist `{ user: \'username\', pass: \'password\' }`\n- hosts: array of host/port objects, one for each specified `[{ host: \'local\', port: 27107 }, { host: \'..\', port: port }]`\n  - if a port is not specified for a given host, the default port (27017) is used\n  - if a unix domain socket is passed, host/port will be undefined and `ipc` will be set to the value specified `[{ ipc: \'/tmp/mongodb-27017\' }]`\n- options: this is a hash of all options specified in the querystring\n\n[LICENSE](https://github.com/aheckmann/muri/blob/master/LICENSE)\n',
346 silly resolved     readmeFilename: 'README.md',
346 silly resolved     bugs: { url: 'https://github.com/aheckmann/muri/issues' },
346 silly resolved     _id: 'muri@0.3.1',
346 silly resolved     _from: 'muri@0.3.1' },
346 silly resolved   { name: 'mpromise',
346 silly resolved     version: '0.4.3',
346 silly resolved     description: 'Promises A+ conformant implementation',
346 silly resolved     main: 'index.js',
346 silly resolved     scripts: { test: 'node node_modules/mocha/bin/_mocha' },
346 silly resolved     devDependencies:
346 silly resolved      { longjohn: '~0.2.1',
346 silly resolved        'promises-aplus-tests': '~2.0.2',
346 silly resolved        mocha: '~1.13.0' },
346 silly resolved     repository: { type: 'git', url: 'git://github.com/aheckmann/mpromise' },
346 silly resolved     keywords: [ 'promise', 'mongoose', 'aplus', 'a+', 'plus' ],
346 silly resolved     author:
346 silly resolved      { name: 'Aaron Heckmann',
346 silly resolved        email: 'aaron.heckmann+github@gmail.com' },
346 silly resolved     license: 'MIT',
346 silly resolved     readme: '#mpromise\n==========\n\n[![Build Status](https://travis-ci.org/aheckmann/mpromise.png)](https://travis-ci.org/aheckmann/mpromise)\n\nA [promises/A+](https://github.com/promises-aplus/promises-spec) conformant implementation, written for [mongoose](http://mongoosejs.com).\n\n## installation\n\n```\n$ npm install mpromise\n```\n\n## docs\n\nAn `mpromise` can be in any of three states, pending, fulfilled (success), or rejected (error). Once it is either fulfilled or rejected it\'s state can no longer be changed.\n\nThe exports object is the Promise constructor.\n\n```js\nvar Promise = require(\'mpromise\');\n```\n\nThe constructor accepts an optional function which is executed when the promise is first resolved (either fulfilled or rejected).\n\n```js\nvar promise = new Promise(fn);\n```\n\nThis is the same as passing the `fn` to `onResolve` directly.\n\n```js\nvar promise = new Promise;\npromise.onResolve(function (err, args..) {\n  ...\n});\n```\n\n### Methods\n\n####fulfill\n\nFulfilling a promise with values:\n\n```js\nvar promise = new Promise;\npromise.fulfill(args...);\n```\n\nIf the promise has already been fulfilled or rejected, no action is taken.\n\n####reject\n\nRejecting a promise with a reason:\n\n```js\nvar promise = new Promise;\npromise.reject(reason);\n```\n\nIf the promise has already been fulfilled or rejected, no action is taken.\n\n####resolve\n\nNode.js callback style promise resolution `(err, args...)`:\n\n```js\nvar promise = new Promise;\npromise.resolve([reason], [arg1, arg2, ...]);\n```\n\nIf the promise has already been fulfilled or rejected, no action is taken.\n\n####onFulfill\n\nTo register a function for execution when the promise is fulfilled, pass it to `onFulfill`. When executed it will receive the arguments passed to `fulfill()`.\n\n```js\nvar promise = new Promise;\npromise.onFulfill(function (a, b) {\n  assert.equal(3, a + b);\n});\npromise.fulfill(1, 2);\n```\n\nThe function will only be called once when the promise is fulfilled, never when rejected.\n\nRegistering a function with `onFulfill` after the promise has already been fulfilled results in the immediate execution of the function with the original arguments used to fulfill the promise.\n\n```js\nvar promise = new Promise;\npromise.fulfill(" :D ");\npromise.onFulfill(function (arg) {\n  console.log(arg); // logs " :D "\n})\n```\n\n####onReject\n\nTo register a function for execution when the promise is rejected, pass it to `onReject`. When executed it will receive the argument passed to `reject()`.\n\n```js\nvar promise = new Promise;\npromise.onReject(function (reason) {\n  assert.equal(\'sad\', reason);\n});\npromise.reject(\'sad\');\n```\n\nThe function will only be called once when the promise is rejected, never when fulfilled.\n\nRegistering a function with `onReject` after the promise has already been rejected results in the immediate execution of the function with the original argument used to reject the promise.\n\n```js\nvar promise = new Promise;\npromise.reject(" :( ");\npromise.onReject(function (reason) {\n  console.log(reason); // logs " :( "\n})\n```\n\n####onResolve\n\nAllows registration of node.js style callbacks `(err, args..)` to handle either promise resolution type (fulfill or reject).\n\n```js\n// fulfillment\nvar promise = new Promise;\npromise.onResolve(function (err, a, b) {\n  console.log(a + b); // logs 3\n});\npromise.fulfill(1, 2);\n\n// rejection\nvar promise = new Promise;\npromise.onResolve(function (err) {\n  if (err) {\n    console.log(err.message); // logs "failed"\n  }\n});\npromise.reject(new Error(\'failed\'));\n```\n\n####then\n\nCreates a new promise and returns it. If `onFulfill` or `onReject` are passed, they are added as SUCCESS/ERROR callbacks to this promise after the nextTick.\n\nConforms to [promises/A+](https://github.com/promises-aplus/promises-spec) specification and passes its [tests](https://github.com/promises-aplus/promises-tests).\n\n```js\n// promise.then(onFulfill, onReject);\n\nvar p = new Promise;\n\np.then(function (arg) {\n  return arg + 1;\n}).then(function (arg) {\n  throw new Error(arg + \' is an error!\');\n}).then(null, function (err) {\n  assert.ok(err instanceof Error);\n  assert.equal(\'2 is an error\', err.message);\n});\np.fullfill(1);\n```\n\n####end\n\nSignifies that this promise was the last in a chain of `then()s`: if a handler passed to the call to `then` which produced this promise throws, the exception be rethrown.\nYou can pass an OnReject handler to `end` so that exceptions will be handled (like a final catch clause);\nThis method returns it\'s promise for easy use with `return`.\n\n```js\nvar p = new Promise;\np.then(function(){ throw new Error(\'shucks\') });\nsetTimeout(function () {\n  p.fulfill();\n  // error was caught and swallowed by the promise returned from\n  // p.then(). we either have to always register handlers on\n  // the returned promises or we can do the following...\n}, 10);\n\n// this time we use .end() which prevents catching thrown errors\nvar p = new Promise;\nsetTimeout(function () {\n  p.fulfill(); // throws "shucks"\n}, 10);\nreturn p.then(function(){ throw new Error(\'shucks\') }).end(); // <--\n```\n\n\n### chain\n\nAllows direct promise to promise chaining (especially useful by a outside aggregating function). It doesn\'t use the asynchronous `resolve` algorithm and so excepts only another Promise as it\'s argument.\n\n```js\nfunction makeMeAPromise(i) {\n  var p = new Promise;\n  p.fulfill(i);\n  return p;\n}\n\nvar returnPromise = initialPromise = new Promise;\nfor (i=0; i<10; ++i)\n    returnPromise = returnPromise.chain(makeMeAPromise(i));\n\ninitialPromise.fulfill();\nreturn returnPromise;\n```\n\n###Event names\n\nIf you\'d like to alter this implementations event names used to signify success and failure you may do so by setting `Promise.SUCCESS` or `Promise.FAILURE` respectively.\n\n```js\nPromise.SUCCESS = \'complete\';\nPromise.FAILURE = \'err\';\n```\n\n###Luke, use the Source\nFor more ideas read the [source](https://github.com/aheckmann/mpromise/blob/master/lib), [tests](https://github.com/aheckmann/mpromise/blob/master/test), or the [mongoose implementation](https://github.com/LearnBoost/mongoose/blob/3.6x/lib/promise.js).\n\n## license\n\n[MIT](https://github.com/aheckmann/mpromise/blob/master/LICENSE)\n',
346 silly resolved     readmeFilename: 'README.md',
346 silly resolved     bugs: { url: 'https://github.com/aheckmann/mpromise/issues' },
346 silly resolved     _id: 'mpromise@0.4.3',
346 silly resolved     _from: 'mpromise@0.4.3' },
346 silly resolved   { name: 'sliced',
346 silly resolved     version: '0.0.5',
346 silly resolved     description: 'A faster Node.js alternative to Array.prototype.slice.call(arguments)',
346 silly resolved     main: 'index.js',
346 silly resolved     scripts: { test: 'make test' },
346 silly resolved     repository: { type: 'git', url: 'git://github.com/aheckmann/sliced' },
346 silly resolved     keywords: [ 'arguments', 'slice', 'array' ],
346 silly resolved     author:
346 silly resolved      { name: 'Aaron Heckmann',
346 silly resolved        email: 'aaron.heckmann+github@gmail.com' },
346 silly resolved     license: 'MIT',
346 silly resolved     devDependencies: { mocha: '1.5.0', benchmark: '~1.0.0' },
346 silly resolved     readme: '#sliced\n==========\n\nA faster alternative to `[].slice.call(arguments)`.\n\n[![Build Status](https://secure.travis-ci.org/aheckmann/sliced.png)](http://travis-ci.org/aheckmann/sliced)\n\nExample output from [benchmark.js](https://github.com/bestiejs/benchmark.js)\n\n    Array.prototype.slice.call x 1,320,205 ops/sec ±2.35% (92 runs sampled)\n    [].slice.call x 1,314,605 ops/sec ±1.60% (95 runs sampled)\n    cached slice.call x 10,468,380 ops/sec ±1.45% (95 runs sampled)\n    sliced x 16,608,237 ops/sec ±1.40% (92 runs sampled)\n    fastest is sliced\n\n    Array.prototype.slice.call(arguments, 1) x 1,383,584 ops/sec ±1.73% (97 runs sampled)\n    [].slice.call(arguments, 1) x 1,494,735 ops/sec ±1.33% (95 runs sampled)\n    cached slice.call(arguments, 1) x 10,085,270 ops/sec ±1.51% (97 runs sampled)\n    sliced(arguments, 1) x 16,620,480 ops/sec ±1.29% (95 runs sampled)\n    fastest is sliced(arguments, 1)\n\n    Array.prototype.slice.call(arguments, -1) x 1,303,262 ops/sec ±1.62% (94 runs sampled)\n    [].slice.call(arguments, -1) x 1,325,615 ops/sec ±1.36% (97 runs sampled)\n    cached slice.call(arguments, -1) x 9,673,603 ops/sec ±1.70% (96 runs sampled)\n    sliced(arguments, -1) x 16,384,575 ops/sec ±1.06% (91 runs sampled)\n    fastest is sliced(arguments, -1)\n\n    Array.prototype.slice.call(arguments, -2, -10) x 1,404,390 ops/sec ±1.61% (95 runs sampled)\n    [].slice.call(arguments, -2, -10) x 1,514,367 ops/sec ±1.21% (96 runs sampled)\n    cached slice.call(arguments, -2, -10) x 9,836,017 ops/sec ±1.21% (95 runs sampled)\n    sliced(arguments, -2, -10) x 18,544,882 ops/sec ±1.30% (91 runs sampled)\n    fastest is sliced(arguments, -2, -10)\n\n    Array.prototype.slice.call(arguments, -2, -1) x 1,458,604 ops/sec ±1.41% (97 runs sampled)\n    [].slice.call(arguments, -2, -1) x 1,536,547 ops/sec ±1.63% (99 runs sampled)\n    cached slice.call(arguments, -2, -1) x 10,060,633 ops/sec ±1.37% (96 runs sampled)\n    sliced(arguments, -2, -1) x 18,608,712 ops/sec ±1.08% (93 runs sampled)\n    fastest is sliced(arguments, -2, -1)\n\n_Benchmark  [source](https://github.com/aheckmann/sliced/blob/master/bench.js)._\n\n##Usage\n\n`sliced` accepts the same arguments as `Array#slice` so you can easily swap it out.\n\n```js\nfunction zing () {\n  var slow = [].slice.call(arguments, 1, 8);\n  var args = slice(arguments, 1, 8);\n\n  var slow = Array.prototype.slice.call(arguments);\n  var args = slice(arguments);\n  // etc\n}\n```\n\n## install\n\n    npm install sliced\n\n\n[LICENSE](https://github.com/aheckmann/sliced/blob/master/LICENSE)\n',
346 silly resolved     readmeFilename: 'README.md',
346 silly resolved     bugs: { url: 'https://github.com/aheckmann/sliced/issues' },
346 silly resolved     _id: 'sliced@0.0.5',
346 silly resolved     _from: 'sliced@0.0.5' },
346 silly resolved   { name: 'mpath',
346 silly resolved     version: '0.1.1',
346 silly resolved     description: '{G,S}et object values using MongoDB path notation',
346 silly resolved     main: 'index.js',
346 silly resolved     scripts: { test: 'make test' },
346 silly resolved     repository: { type: 'git', url: 'git://github.com/aheckmann/mpath.git' },
346 silly resolved     keywords: [ 'mongodb', 'path', 'get', 'set' ],
346 silly resolved     author:
346 silly resolved      { name: 'Aaron Heckmann',
346 silly resolved        email: 'aaron.heckmann+github@gmail.com' },
346 silly resolved     license: 'MIT',
346 silly resolved     devDependencies: { mocha: '1.6.0' },
346 silly resolved     readme: '#mpath\n\n{G,S}et javascript object values using MongoDB-like path notation.\n\n###Getting\n\n```js\nvar mpath = require(\'mpath\');\n\nvar obj = {\n    comments: [\n      { title: \'funny\' },\n      { title: \'exciting!\' }\n    ]\n}\n\nmpath.get(\'comments.1.title\', obj) // \'exciting!\'\n```\n\n`mpath.get` supports array property notation as well.\n\n```js\nvar obj = {\n    comments: [\n      { title: \'funny\' },\n      { title: \'exciting!\' }\n    ]\n}\n\nmpath.get(\'comments.title\', obj) // [\'funny\', \'exciting!\']\n```\n\nArray property and indexing syntax, when used together, are very powerful.\n\n```js\nvar obj = {\n  array: [\n      { o: { array: [{x: {b: [4,6,8]}}, { y: 10} ] }}\n    , { o: { array: [{x: {b: [1,2,3]}}, { x: {z: 10 }}, { x: \'Turkey Day\' }] }}\n    , { o: { array: [{x: {b: null }}, { x: { b: [null, 1]}}] }}\n    , { o: { array: [{x: null }] }}\n    , { o: { array: [{y: 3 }] }}\n    , { o: { array: [3, 0, null] }}\n    , { o: { name: \'ha\' }}\n  ];\n}\n\nvar found = mpath.get(\'array.o.array.x.b.1\', obj);\n\nconsole.log(found); // prints..\n\n    [ [6, undefined]\n    , [2, undefined, undefined]\n    , [null, 1]\n    , [null]\n    , [undefined]\n    , [undefined, undefined, undefined]\n    , undefined\n    ]\n\n```\n\n#####Field selection rules:\n\nThe following rules are iteratively applied to each `segment` in the passed `path`. For example:\n\n```js\nvar path = \'one.two.14\'; // path\n\'one\' // segment 0\n\'two\' // segment 1\n14    // segment 2\n```\n\n- 1) when value of the segment parent is not an array, return the value of `parent.segment`\n- 2) when value of the segment parent is an array\n  - a) if the segment is an integer, replace the parent array with the value at `parent[segment]`\n  - b) if not an integer, keep the array but replace each array `item` with the value returned from calling `get(remainingSegments, item)` or undefined if falsey.\n\n#####Maps\n\n`mpath.get` also accepts an optional `map` argument which receives each individual found value. The value returned from the `map` function will be used in the original found values place.\n\n```js\nvar obj = {\n    comments: [\n      { title: \'funny\' },\n      { title: \'exciting!\' }\n    ]\n}\n\nmpath.get(\'comments.title\', obj, function (val) {\n  return \'funny\' == val\n    ? \'amusing\'\n    : val;\n});\n// [\'amusing\', \'exciting!\']\n```\n\n###Setting\n\n```js\nvar obj = {\n    comments: [\n      { title: \'funny\' },\n      { title: \'exciting!\' }\n    ]\n}\n\nmpath.set(\'comments.1.title\', \'hilarious\', obj)\nconsole.log(obj.comments[1].title) // \'hilarious\'\n```\n\n`mpath.set` supports the same array property notation as `mpath.get`.\n\n```js\nvar obj = {\n    comments: [\n      { title: \'funny\' },\n      { title: \'exciting!\' }\n    ]\n}\n\nmpath.set(\'comments.title\', [\'hilarious\', \'fruity\'], obj);\n\nconsole.log(obj); // prints..\n\n  { comments: [\n      { title: \'hilarious\' },\n      { title: \'fruity\' }\n  ]}\n```\n\nArray property and indexing syntax can be used together also when setting.\n\n```js\nvar obj = {\n  array: [\n      { o: { array: [{x: {b: [4,6,8]}}, { y: 10} ] }}\n    , { o: { array: [{x: {b: [1,2,3]}}, { x: {z: 10 }}, { x: \'Turkey Day\' }] }}\n    , { o: { array: [{x: {b: null }}, { x: { b: [null, 1]}}] }}\n    , { o: { array: [{x: null }] }}\n    , { o: { array: [{y: 3 }] }}\n    , { o: { array: [3, 0, null] }}\n    , { o: { name: \'ha\' }}\n  ]\n}\n\nmpath.set(\'array.1.o\', \'this was changed\', obj);\n\nconsole.log(require(\'util\').inspect(obj, false, 1000)); // prints..\n\n{\n  array: [\n      { o: { array: [{x: {b: [4,6,8]}}, { y: 10} ] }}\n    , { o: \'this was changed\' }\n    , { o: { array: [{x: {b: null }}, { x: { b: [null, 1]}}] }}\n    , { o: { array: [{x: null }] }}\n    , { o: { array: [{y: 3 }] }}\n    , { o: { array: [3, 0, null] }}\n    , { o: { name: \'ha\' }}\n  ];\n}\n\nmpath.set(\'array.o.array.x\', \'this was changed too\', obj);\n\nconsole.log(require(\'util\').inspect(obj, false, 1000)); // prints..\n\n{\n  array: [\n      { o: { array: [{x: \'this was changed too\'}, { y: 10, x: \'this was changed too\'} ] }}\n    , { o: \'this was changed\' }\n    , { o: { array: [{x: \'this was changed too\'}, { x: \'this was changed too\'}] }}\n    , { o: { array: [{x: \'this was changed too\'}] }}\n    , { o: { array: [{x: \'this was changed too\', y: 3 }] }}\n    , { o: { array: [3, 0, null] }}\n    , { o: { name: \'ha\' }}\n  ];\n}\n```\n\n####Setting arrays\n\nBy default, setting a property within an array to another array results in each element of the new array being set to the item in the destination array at the matching index. An example is helpful.\n\n```js\nvar obj = {\n    comments: [\n      { title: \'funny\' },\n      { title: \'exciting!\' }\n    ]\n}\n\nmpath.set(\'comments.title\', [\'hilarious\', \'fruity\'], obj);\n\nconsole.log(obj); // prints..\n\n  { comments: [\n      { title: \'hilarious\' },\n      { title: \'fruity\' }\n  ]}\n```\n\nIf we do not desire this destructuring-like assignment behavior we may instead specify the `$` operator in the path being set to force the array to be copied directly.\n\n```js\nvar obj = {\n    comments: [\n      { title: \'funny\' },\n      { title: \'exciting!\' }\n    ]\n}\n\nmpath.set(\'comments.$.title\', [\'hilarious\', \'fruity\'], obj);\n\nconsole.log(obj); // prints..\n\n  { comments: [\n      { title: [\'hilarious\', \'fruity\'] },\n      { title: [\'hilarious\', \'fruity\'] }\n  ]}\n```\n\n####Field assignment rules\n\nThe rules utilized mirror those used on `mpath.get`, meaning we can take values returned from `mpath.get`, update them, and reassign them using `mpath.set`. Note that setting nested arrays of arrays can get unweildy quickly. Check out the [tests](https://github.com/aheckmann/mpath/blob/master/test/index.js) for more extreme examples.\n\n#####Maps\n\n`mpath.set` also accepts an optional `map` argument which receives each individual value being set. The value returned from the `map` function will be used in the original values place.\n\n```js\nvar obj = {\n    comments: [\n      { title: \'funny\' },\n      { title: \'exciting!\' }\n    ]\n}\n\nmpath.set(\'comments.title\', [\'hilarious\', \'fruity\'], obj, function (val) {\n  return val.length;\n});\n\nconsole.log(obj); // prints..\n\n  { comments: [\n      { title: 9 },\n      { title: 6 }\n  ]}\n```\n\n### Custom object types\n\nSometimes you may want to enact the same functionality on custom object types that store all their real data internally, say for an ODM type object. No fear, `mpath` has you covered. Simply pass the name of the property being used to store the internal data and it will be traversed instead:\n\n```js\nvar mpath = require(\'mpath\');\n\nvar obj = {\n    comments: [\n      { title: \'exciting!\', _doc: { title: \'great!\' }}\n    ]\n}\n\nmpath.get(\'comments.0.title\', obj, \'_doc\')            // \'great!\'\nmpath.set(\'comments.0.title\', \'nov 3rd\', obj, \'_doc\')\nmpath.get(\'comments.0.title\', obj, \'_doc\')            // \'nov 3rd\'\nmpath.get(\'comments.0.title\', obj)                    // \'exciting\'\n```\n\nWhen used with a `map`, the `map` argument comes last.\n\n```js\nmpath.get(path, obj, \'_doc\', map);\nmpath.set(path, val, obj, \'_doc\', map);\n```\n\n[LICENSE](https://github.com/aheckmann/mpath/blob/master/LICENSE)\n\n',
346 silly resolved     readmeFilename: 'README.md',
346 silly resolved     bugs: { url: 'https://github.com/aheckmann/mpath/issues' },
346 silly resolved     _id: 'mpath@0.1.1',
346 silly resolved     _from: 'mpath@0.1.1' },
346 silly resolved   { name: 'regexp-clone',
346 silly resolved     version: '0.0.1',
346 silly resolved     description: 'Clone RegExps with options',
346 silly resolved     main: 'index.js',
346 silly resolved     scripts: { test: 'make test' },
346 silly resolved     repository:
346 silly resolved      { type: 'git',
346 silly resolved        url: 'git://github.com/aheckmann/regexp-clone.git' },
346 silly resolved     keywords: [ 'RegExp', 'clone' ],
346 silly resolved     author:
346 silly resolved      { name: 'Aaron Heckmann',
346 silly resolved        email: 'aaron.heckmann+github@gmail.com' },
346 silly resolved     license: 'MIT',
346 silly resolved     devDependencies: { mocha: '1.8.1' },
346 silly resolved     readme: '#regexp-clone\n==============\n\nClones RegExps with flag preservation\n\n```js\nvar regexpClone = require(\'regexp-clone\');\n\nvar a = /somethin/g;\nconsole.log(a.global); // true\n\nvar b = regexpClone(a);\nconsole.log(b.global); // true\n```\n\n## License\n\n[MIT](https://github.com/aheckmann/regexp-clone/blob/master/LICENSE)\n',
346 silly resolved     readmeFilename: 'README.md',
346 silly resolved     bugs: { url: 'https://github.com/aheckmann/regexp-clone/issues' },
346 silly resolved     _id: 'regexp-clone@0.0.1',
346 silly resolved     _from: 'regexp-clone@0.0.1' },
346 silly resolved   { name: 'mquery',
346 silly resolved     version: '0.5.3',
346 silly resolved     description: 'Expressive query building for MongoDB',
346 silly resolved     main: 'index.js',
346 silly resolved     scripts: { test: 'make test' },
346 silly resolved     repository: { type: 'git', url: 'git://github.com/aheckmann/mquery.git' },
346 silly resolved     dependencies: { sliced: '0.0.5', debug: '0.7.4', 'regexp-clone': '0.0.1' },
346 silly resolved     devDependencies: { mongodb: '1.3.23', mocha: '1.9.x' },
346 silly resolved     bugs: { url: 'https://github.com/aheckmann/mquery/issues/new' },
346 silly resolved     author:
346 silly resolved      { name: 'Aaron Heckmann',
346 silly resolved        email: 'aaron.heckmann+github@gmail.com' },
346 silly resolved     license: 'MIT',
346 silly resolved     keywords: [ 'mongodb', 'query', 'builder' ],
346 silly resolved     homepage: 'https://github.com/aheckmann/mquery/',
346 silly resolved     readme: '#mquery\n===========\n\n`mquery` is a fluent mongodb query builder designed to run in multiple environments. As of v0.1, `mquery` runs on `Node.js` only with support for the MongoDB shell and browser environments planned for upcoming releases.\n\n##Features\n\n  - fluent query builder api\n  - custom base query support\n  - MongoDB 2.4 geoJSON support\n  - method + option combinations validation\n  - node.js driver compatibility\n  - environment detection\n  - [debug](https://github.com/visionmedia/debug) support\n  - separated collection implementations for maximum flexibility\n\n[![Build Status](https://travis-ci.org/aheckmann/mquery.png)](https://travis-ci.org/aheckmann/mquery)\n\n##Use\n\n```js\nrequire(\'mongodb\').connect(uri, function (err, db) {\n  if (err) return handleError(err);\n\n  // get a collection\n  var collection = db.collection(\'artists\');\n\n  // pass it to the constructor\n  mquery(collection).find({..}, callback);\n\n  // or pass it to the collection method\n  mquery().find({..}).collection(collection).exec(callback)\n\n  // or better yet, create a custom query constructor that has it always set\n  var Artist = mquery(collection).toConstructor();\n  Artist().find(..).where(..).exec(callback)\n})\n```\n\n`mquery` requires a collection object to work with. In the example above we just pass the collection object created using the official [MongoDB driver](https://github.com/mongodb/node-mongodb-native).\n\n\n##Fluent API\n\n- [find](#find)\n- [findOne](#findOne)\n- [count](#count)\n- [remove](#remove)\n- [update](#update)\n- [findOneAndUpdate](#findoneandupdate)\n- [findOneAndRemove](#findoneandremove)\n- [distinct](#distinct)\n- [exec](#exec)\n- [all](#all)\n- [and](#and)\n- [box](#box)\n- [circle](#circle)\n- [elemMatch](#elemmatch)\n- [equals](#equals)\n- [exists](#exists)\n- [geometry](#geometry)\n- [gt](#gt)\n- [gte](#gte)\n- [in](#in)\n- [intersects](#intersects)\n- [lt](#lt)\n- [lte](#lte)\n- [maxDistance](#maxdistance)\n- [mod](#mod)\n- [ne](#ne)\n- [nin](#nin)\n- [nor](#nor)\n- [near](#near)\n- [or](#or)\n- [polygon](#polygon)\n- [regex](#regex)\n- [select](#select)\n- [selected](#selected)\n- [selectedInclusively](#selectedinclusively)\n- [selectedExclusively](#selectedexclusively)\n- [size](#size)\n- [slice](#slice)\n- [within](#within)\n- [where](#where)\n- [$where](#where-1)\n- [batchSize](#batchsize)\n- [comment](#comment)\n- [hint](#hint)\n- [limit](#limit)\n- [maxScan](#maxscan)\n- [skip](#skip)\n- [sort](#sort)\n- [read](#read)\n- [slaveOk](#slaveok)\n- [snapshot](#snapshot)\n- [tailable](#tailable)\n\n## Helpers\n\n- [collection](#collection)\n- [merge](#mergeobject)\n- [setOptions](#setoptionsoptions)\n- [mquery.canMerge](#mquerycanmerge)\n- [mquery.use$geoWithin](#mqueryusegeowithin)\n\n###find()\n\nDeclares this query a _find_ query. Optionally pass a match clause and / or callback. If a callback is passed the query is executed.\n\n```js\nmquery().find()\nmquery().find(match)\nmquery().find(callback)\nmquery().find(match, function (err, docs) {\n  assert(Array.isArray(docs));\n})\n```\n\n###findOne()\n\nDeclares this query a _findOne_ query. Optionally pass a match clause and / or callback. If a callback is passed the query is executed.\n\n```js\nmquery().findOne()\nmquery().findOne(match)\nmquery().findOne(callback)\nmquery().findOne(match, function (err, doc) {\n  if (doc) {\n    // the document may not be found\n    console.log(doc);\n  }\n})\n```\n\n###count()\n\nDeclares this query a _count_ query. Optionally pass a match clause and / or callback. If a callback is passed the query is executed.\n\n```js\nmquery().count()\nmquery().count(match)\nmquery().count(callback)\nmquery().count(match, function (err, number){\n  console.log(\'we found %d matching documents\', number);\n})\n```\n\n###remove()\n\nDeclares this query a _remove_ query. Optionally pass a match clause and / or callback. If a callback is passed the query is executed.\n\n```js\nmquery().remove()\nmquery().remove(match)\nmquery().remove(callback)\nmquery().remove(match, function (err){})\n```\n\n###update()\n\nDeclares this query an _update_ query. Optionally pass an update document, match clause, options or callback. If a callback is passed, the query is executed. To force execution without passing a callback, run `update(true)`.\n\n```js\nmquery().update()\nmquery().update(match, updateDocument)\nmquery().update(match, updateDocument, options)\n\n// the following all execute the command\nmquery().update(callback)\nmquery().update({$set: updateDocument, callback)\nmquery().update(match, updateDocument, callback)\nmquery().update(match, updateDocument, options, function (err, result){})\nmquery().update(true) // executes (unsafe write)\n```\n\n#####the update document\n\nAll paths passed that are not `$atomic` operations will become `$set` ops. For example:\n\n```js\nmquery(collection).where({ _id: id }).update({ title: \'words\' }, callback)\n```\n\nbecomes\n\n```js\ncollection.update({ _id: id }, { $set: { title: \'words\' }}, callback)\n```\n\nThis behavior can be overridden using the `overwrite` option (see below).\n\n#####options\n\nOptions are passed to the `setOptions()` method.\n\n- overwrite\n\nPassing an empty object `{ }` as the update document will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option, the update operation will be ignored and the callback executed without sending the command to MongoDB to prevent accidently overwritting documents in the collection.\n\n```js\nvar q = mquery(collection).where({ _id: id }).setOptions({ overwrite: true });\nq.update({ }, callback); // overwrite with an empty doc\n```\n\nThe `overwrite` option isn\'t just for empty objects, it also provides a means to override the default `$set` conversion and send the update document as is.\n\n```js\n// create a base query\nvar base = mquery({ _id: 108 }).collection(collection).toConstructor();\n\nbase().findOne(function (err, doc) {\n  console.log(doc); // { _id: 108, name: \'cajon\' })\n\n  base().setOptions({ overwrite: true }).update({ changed: true }, function (err) {\n    base.findOne(function (err, doc) {\n      console.log(doc); // { _id: 108, changed: true }) - the doc was overwritten\n    });\n  });\n})\n```\n\n- multi\n\nUpdates only modify a single document by default. To update multiple documents, set the `multi` option to `true`.\n\n```js\nmquery()\n  .collection(coll)\n  .update({ name: /^match/ }, { $addToSet: { arr: 4 }}, { multi: true }, callback)\n\n// another way of doing it\nmquery({ name: /^match/ })\n  .collection(coll)\n  .setOptions({ multi: true })\n  .update({ $addToSet: { arr: 4 }}, callback)\n\n// update multiple documents with an empty doc\nvar q = mquery(collection).where({ name: /^match/ });\nq.setOptions({ multi: true, overwrite: true })\nq.update({ });\nq.update(function (err, result) {\n  console.log(arguments);\n});\n```\n\n###findOneAndUpdate()\n\nDeclares this query a _findAndModify_ with update query. Optionally pass a match clause, update document, options, or callback. If a callback is passed, the query is executed.\n\nWhen executed, the first matching document (if found) is modified according to the update document and passed back to the callback.\n\n#####options\n\nOptions are passed to the `setOptions()` method.\n\n- `new`: boolean - true to return the modified document rather than the original. defaults to true\n- `upsert`: boolean - creates the object if it doesn\'t exist. defaults to false\n- `sort`: if multiple docs are found by the match condition, sets the sort order to choose which doc to update\n\n```js\nquery.findOneAndUpdate()\nquery.findOneAndUpdate(updateDocument)\nquery.findOneAndUpdate(match, updateDocument)\nquery.findOneAndUpdate(match, updateDocument, options)\n\n// the following all execute the command\nquery.findOneAndUpdate(callback)\nquery.findOneAndUpdate(updateDocument, callback)\nquery.findOneAndUpdate(match, updateDocument, callback)\nquery.findOneAndUpdate(match, updateDocument, options, function (err, doc) {\n  if (doc) {\n    // the document may not be found\n    console.log(doc);\n  }\n})\n ```\n\n###findOneAndRemove()\n\nDeclares this query a _findAndModify_ with remove query. Optionally pass a match clause, options, or callback. If a callback is passed, the query is executed.\n\nWhen executed, the first matching document (if found) is modified according to the update document, removed from the collection and passed to the callback.\n\n#####options\n\nOptions are passed to the `setOptions()` method.\n\n- `sort`: if multiple docs are found by the condition, sets the sort order to choose which doc to modify and remove\n\n```js\nA.where().findOneAndRemove()\nA.where().findOneAndRemove(match)\nA.where().findOneAndRemove(match, options)\n\n// the following all execute the command\nA.where().findOneAndRemove(callback)\nA.where().findOneAndRemove(match, callback)\nA.where().findOneAndRemove(match, options, function (err, doc) {\n  if (doc) {\n    // the document may not be found\n    console.log(doc);\n  }\n})\n ```\n\n###distinct()\n\nDeclares this query a _distinct_ query. Optionally pass the distinct field, a match clause or callback. If a callback is passed the query is executed.\n\n```js\nmquery().distinct()\nmquery().distinct(match)\nmquery().distinct(match, field)\nmquery().distinct(field)\n\n// the following all execute the command\nmquery().distinct(callback)\nmquery().distinct(field, callback)\nmquery().distinct(match, callback)\nmquery().distinct(match, field, function (err, result) {\n  console.log(result);\n})\n```\n\n###exec()\n\nExecutes the query.\n\n```js\nmquery().findOne().where(\'route\').intersects(polygon).exec(function (err, docs){})\n```\n\n-------------\n\n###all()\n\nSpecifies an `$all` query condition\n\n```js\nmquery().where(\'permission\').all([\'read\', \'write\'])\n```\n\n[MongoDB documentation](http://docs.mongodb.org/manual/reference/operator/all/)\n\n###and()\n\nSpecifies arguments for an `$and` condition\n\n```js\nmquery().and([{ color: \'green\' }, { status: \'ok\' }])\n```\n\n[MongoDB documentation](http://docs.mongodb.org/manual/reference/operator/and/)\n\n###box()\n\nSpecifies a `$box` condition\n\n```js\nvar lowerLeft = [40.73083, -73.99756]\nvar upperRight= [40.741404,  -73.988135]\n\nmquery().where(\'location\').within().box(lowerLeft, upperRight)\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/box/)\n\n###circle()\n\nSpecifies a `$center` or `$centerSphere` condition.\n\n```js\nvar area = { center: [50, 50], radius: 10, unique: true }\nquery.where(\'loc\').within().circle(area)\nquery.circle(\'loc\', area);\n\n// for spherical calculations\nvar area = { center: [50, 50], radius: 10, unique: true, spherical: true }\nquery.where(\'loc\').within().circle(area)\nquery.circle(\'loc\', area);\n```\n\n- [MongoDB Documentation - center](http://docs.mongodb.org/manual/reference/operator/center/)\n- [MongoDB Documentation - centerSphere](http://docs.mongodb.org/manual/reference/operator/centerSphere/)\n\n###elemMatch()\n\nSpecifies an `$elemMatch` condition\n\n```js\nquery.where(\'comment\').elemMatch({ author: \'autobot\', votes: {$gte: 5}})\n\nquery.elemMatch(\'comment\', function (elem) {\n  elem.where(\'author\').equals(\'autobot\');\n  elem.where(\'votes\').gte(5);\n})\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/elemMatch/)\n\n###equals()\n\nSpecifies the complementary comparison value for the path specified with `where()`.\n\n```js\nmquery().where(\'age\').equals(49);\n\n// is the same as\n\nmquery().where({ \'age\': 49 });\n```\n\n###exists()\n\nSpecifies an `$exists` condition\n\n```js\n// { name: { $exists: true }}\nmquery().where(\'name\').exists()\nmquery().where(\'name\').exists(true)\nmquery().exists(\'name\')\n\n// { name: { $exists: false }}\nmquery().where(\'name\').exists(false);\nmquery().exists(\'name\', false);\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/exists/)\n\n###geometry()\n\nSpecifies a `$geometry` condition\n\n```js\nvar polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\nquery.where(\'loc\').within().geometry({ type: \'Polygon\', coordinates: polyA })\n\n// or\nvar polyB = [[ 0, 0 ], [ 1, 1 ]]\nquery.where(\'loc\').within().geometry({ type: \'LineString\', coordinates: polyB })\n\n// or\nvar polyC = [ 0, 0 ]\nquery.where(\'loc\').within().geometry({ type: \'Point\', coordinates: polyC })\n\n// or\nquery.where(\'loc\').intersects().geometry({ type: \'Point\', coordinates: polyC })\n\n// or\nquery.where(\'loc\').near().geometry({ type: \'Point\', coordinates: [3,5] })\n```\n\n`geometry()` **must** come after `intersects()`, `within()`, or `near()`.\n\nThe `object` argument must contain `type` and `coordinates` properties.\n\n- type `String`\n- coordinates `Array`\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/geometry/)\n\n###gt()\n\nSpecifies a `$gt` query condition.\n\n```js\nmquery().where(\'clicks\').gt(999)\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/gt/)\n\n###gte()\n\nSpecifies a `$gte` query condition.\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/gte/)\n\n```js\nmquery().where(\'clicks\').gte(1000)\n```\n\n###in()\n\nSpecifies an `$in` query condition.\n\n```js\nmquery().where(\'author_id\').in([3, 48901, 761])\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/in/)\n\n###intersects()\n\nDeclares an `$geoIntersects` query for `geometry()`.\n\n```js\nquery.where(\'path\').intersects().geometry({\n    type: \'LineString\'\n  , coordinates: [[180.0, 11.0], [180, 9.0]]\n})\n\n// geometry arguments are supported\nquery.where(\'path\').intersects({\n    type: \'LineString\'\n  , coordinates: [[180.0, 11.0], [180, 9.0]]\n})\n```\n\n**Must** be used after `where()`.\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/geoIntersects/)\n\n###lt()\n\nSpecifies a `$lt` query condition.\n\n```js\nmquery().where(\'clicks\').lt(50)\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/lt/)\n\n###lte()\n\nSpecifies a `$lte` query condition.\n\n```js\nmquery().where(\'clicks\').lte(49)\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/lte/)\n\n###maxDistance()\n\nSpecifies a `$maxDistance` query condition.\n\n```js\nmquery().where(\'location\').near({ center: [139, 74.3] }).maxDistance(5)\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/maxDistance/)\n\n###mod()\n\nSpecifies a `$mod` condition\n\n```js\nmquery().where(\'count\').mod(2, 0)\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/mod/)\n\n###ne()\n\nSpecifies a `$ne` query condition.\n\n```js\nmquery().where(\'status\').ne(\'ok\')\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/ne/)\n\n###nin()\n\nSpecifies an `$nin` query condition.\n\n```js\nmquery().where(\'author_id\').nin([3, 48901, 761])\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/nin/)\n\n###nor()\n\nSpecifies arguments for an `$nor` condition.\n\n```js\nmquery().nor([{ color: \'green\' }, { status: \'ok\' }])\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/nor/)\n\n###near()\n\nSpecifies arguments for a `$near` or `$nearSphere` condition.\n\nThese operators return documents sorted by distance.\n\n####Example\n\n```js\nquery.where(\'loc\').near({ center: [10, 10] });\nquery.where(\'loc\').near({ center: [10, 10], maxDistance: 5 });\nquery.near(\'loc\', { center: [10, 10], maxDistance: 5 });\n\n// GeoJSON\nquery.where(\'loc\').near({ center: { type: \'Point\', coordinates: [10, 10] }});\nquery.where(\'loc\').near({ center: { type: \'Point\', coordinates: [10, 10] }, maxDistance: 5, spherical: true });\nquery.where(\'loc\').near().geometry({ type: \'Point\', coordinates: [10, 10] });\n\n// For a $nearSphere condition, pass the `spherical` option.\nquery.near({ center: [10, 10], maxDistance: 5, spherical: true });\n```\n\n[MongoDB Documentation](http://www.mongodb.org/display/DOCS/Geospatial+Indexing)\n\n###or()\n\nSpecifies arguments for an `$or` condition.\n\n```js\nmquery().or([{ color: \'red\' }, { status: \'emergency\' }])\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/or/)\n\n###polygon()\n\nSpecifies a `$polygon` condition\n\n```js\nmquery().where(\'loc\').within().polygon([10,20], [13, 25], [7,15])\nmquery().polygon(\'loc\', [10,20], [13, 25], [7,15])\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/polygon/)\n\n###regex()\n\nSpecifies a `$regex` query condition.\n\n```js\nmquery().where(\'name\').regex(/^sixstepsrecords/)\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/regex/)\n\n###select()\n\nSpecifies which document fields to include or exclude\n\n```js\n// 1 means include, 0 means exclude\nmquery().select({ name: 1, address: 1, _id: 0 })\n\n// or\n\nmquery().select(\'name address -_id\')\n```\n\n#####String syntax\n\nWhen passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\n\n```js\n// include a and b, exclude c\nquery.select(\'a b -c\');\n\n// or you may use object notation, useful when\n// you have keys already prefixed with a "-"\nquery.select({a: 1, b: 1, c: 0});\n```\n\n_Cannot be used with `distinct()`._\n\n###selected()\n\nDetermines if the query has selected any fields.\n\n```js\nvar query = mquery();\nquery.selected() // false\nquery.select(\'-name\');\nquery.selected() // true\n```\n\n###selectedInclusively()\n\nDetermines if the query has selected any fields inclusively.\n\n```js\nvar query = mquery().select(\'name\');\nquery.selectedInclusively() // true\n\nvar query = mquery();\nquery.selected() // false\nquery.select(\'-name\');\nquery.selectedInclusively() // false\nquery.selectedExclusively() // true\n```\n\n###selectedExclusively()\n\nDetermines if the query has selected any fields exclusively.\n\n```js\nvar query = mquery().select(\'-name\');\nquery.selectedExclusively() // true\n\nvar query = mquery();\nquery.selected() // false\nquery.select(\'name\');\nquery.selectedExclusively() // false\nquery.selectedInclusively() // true\n```\n\n###size()\n\nSpecifies a `$size` query condition.\n\n```js\nmquery().where(\'someArray\').size(6)\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/size/)\n\n###slice()\n\nSpecifies a `$slice` projection for a `path`\n\n```js\nmquery().where(\'comments\').slice(5)\nmquery().where(\'comments\').slice(-5)\nmquery().where(\'comments\').slice([-10, 5])\n```\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/projection/slice/)\n\n###within()\n\nSets a `$geoWithin` or `$within` argument for geo-spatial queries.\n\n```js\nmquery().within().box()\nmquery().within().circle()\nmquery().within().geometry()\n\nmquery().where(\'loc\').within({ center: [50,50], radius: 10, unique: true, spherical: true });\nmquery().where(\'loc\').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\nmquery().where(\'loc\').within({ polygon: [[],[],[],[]] });\n\nmquery().where(\'loc\').within([], [], []) // polygon\nmquery().where(\'loc\').within([], []) // box\nmquery().where(\'loc\').within({ type: \'LineString\', coordinates: [...] }); // geometry\n```\n\nAs of mquery 2.0, `$geoWithin` is used by default. This impacts you if running MongoDB < 2.4. To alter this behavior, see [mquery.use$geoWithin](#mqueryusegeowithin).\n\n**Must** be used after `where()`.\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/reference/operator/geoWithin/)\n\n###where()\n\nSpecifies a `path` for use with chaining\n\n```js\n// instead of writing:\nmquery().find({age: {$gte: 21, $lte: 65}});\n\n// we can instead write:\nmquery().where(\'age\').gte(21).lte(65);\n\n// passing query conditions is permitted too\nmquery().find().where({ name: \'vonderful\' })\n\n// chaining\nmquery()\n.where(\'age\').gte(21).lte(65)\n.where({ \'name\': /^vonderful/i })\n.where(\'friends\').slice(10)\n.exec(callback)\n```\n\n###$where()\n\nSpecifies a `$where` condition.\n\nUse `$where` when you need to select documents using a JavaScript expression.\n\n```js\nquery.$where(\'this.comments.length > 10 || this.name.length > 5\').exec(callback)\n\nquery.$where(function () {\n  return this.comments.length > 10 || this.name.length > 5;\n})\n```\n\nOnly use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`. Be sure to read about all of [its caveats](http://docs.mongodb.org/manual/reference/operator/where/) before using.\n\n-----------\n\n###batchSize()\n\nSpecifies the batchSize option.\n\n```js\nquery.batchSize(100)\n```\n\n_Cannot be used with `distinct()`._\n\n[MongoDB documentation](http://docs.mongodb.org/manual/reference/method/cursor.batchSize/)\n\n###comment()\n\nSpecifies the comment option.\n\n```js\nquery.comment(\'login query\');\n```\n\n_Cannot be used with `distinct()`._\n\n[MongoDB documentation](http://docs.mongodb.org/manual/reference/operator/)\n\n###hint()\n\nSets query hints.\n\n```js\nmquery().hint({ indexA: 1, indexB: -1 })\n```\n\n_Cannot be used with `distinct()`._\n\n[MongoDB documentation](http://docs.mongodb.org/manual/reference/operator/hint/)\n\n###limit()\n\nSpecifies the limit option.\n\n```js\nquery.limit(20)\n```\n\n_Cannot be used with `distinct()`._\n\n[MongoDB documentation](http://docs.mongodb.org/manual/reference/method/cursor.limit/)\n\n###maxScan()\n\nSpecifies the maxScan option.\n\n```js\nquery.maxScan(100)\n```\n\n_Cannot be used with `distinct()`._\n\n[MongoDB documentation](http://docs.mongodb.org/manual/reference/operator/maxScan/)\n\n###skip()\n\nSpecifies the skip option.\n\n```js\nquery.skip(100).limit(20)\n```\n\n_Cannot be used with `distinct()`._\n\n[MongoDB documentation](http://docs.mongodb.org/manual/reference/method/cursor.skip/)\n\n###sort()\n\nSets the query sort order.\n\nIf an object is passed, key values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\n\nIf a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\n\n```js\n// these are equivalent\nquery.sort({ field: \'asc\', test: -1 });\nquery.sort(\'field -test\');\n```\n\n_Cannot be used with `distinct()`._\n\n[MongoDB documentation](http://docs.mongodb.org/manual/reference/method/cursor.sort/)\n\n###read()\n\nSets the readPreference option for the query.\n\n```js\nmquery().read(\'primary\')\nmquery().read(\'p\')  // same as primary\n\nmquery().read(\'primaryPreferred\')\nmquery().read(\'pp\') // same as primaryPreferred\n\nmquery().read(\'secondary\')\nmquery().read(\'s\')  // same as secondary\n\nmquery().read(\'secondaryPreferred\')\nmquery().read(\'sp\') // same as secondaryPreferred\n\nmquery().read(\'nearest\')\nmquery().read(\'n\')  // same as nearest\n```\n\n#####Preferences:\n\n- `primary` - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\n- `secondary` - Read from secondary if available, otherwise error.\n- `primaryPreferred` - Read from primary if available, otherwise a secondary.\n- `secondaryPreferred` - Read from a secondary if available, otherwise read from the primary.\n- `nearest` - All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\n\nAliases\n\n- `p`   primary\n- `pp`  primaryPreferred\n- `s`   secondary\n- `sp`  secondaryPreferred\n- `n`   nearest\n\n#####Preference Tags:\n\nTo keep the separation of concerns between `mquery` and your driver\nclean, `mquery#read()` no longer handles specifying a second `tags` argument as of version 0.5.\nIf you need to specify tags, pass any non-string argument as the first argument.\n`mquery` will pass this argument untouched to your collections methods later.\nFor example:\n\n```js\n// example of specifying tags using the Node.js driver\nvar ReadPref = require(\'mongodb\').ReadPreference;\nvar preference = new ReadPref(\'secondary\', [{ dc:\'sf\', s: 1 },{ dc:\'ma\', s: 2 }]);\nmquery(..).read(preference).exec();\n```\n\nRead more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\n\n###slaveOk()\n\nSets the slaveOk option. `true` allows reading from secondaries.\n\n**deprecated** use [read()](#read) preferences instead if on mongodb >= 2.2\n\n```js\nquery.slaveOk() // true\nquery.slaveOk(true)\nquery.slaveOk(false)\n```\n\n[MongoDB documentation](http://docs.mongodb.org/manual/reference/method/rs.slaveOk/)\n\n###snapshot()\n\nSpecifies this query as a snapshot query.\n\n```js\nmquery().snapshot() // true\nmquery().snapshot(true)\nmquery().snapshot(false)\n```\n\n_Cannot be used with `distinct()`._\n\n[MongoDB documentation](http://docs.mongodb.org/manual/reference/operator/snapshot/)\n\n###tailable()\n\nSets tailable option.\n\n```js\nmquery().tailable() <== true\nmquery().tailable(true)\nmquery().tailable(false)\n```\n\n_Cannot be used with `distinct()`._\n\n[MongoDB Documentation](http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/)\n\n##Helpers\n\n###collection()\n\nSets the querys collection.\n\n```js\nmquery().collection(aCollection)\n```\n\n\n###merge(object)\n\nMerges other mquery or match condition objects into this one. When an muery instance is passed, its match conditions, field selection and options are merged.\n\n```js\nvar drum = mquery({ type: \'drum\' }).collection(instruments);\nvar redDrum = mqery({ color: \'red\' }).merge(drum);\nredDrum.count(function (err, n) {\n  console.log(\'there are %d red drums\', n);\n})\n```\n\nInternally uses `mquery.canMerge` to determine validity.\n\n###setOptions(options)\n\nSets query options.\n\n```js\nmquery().setOptions({ collection: coll, limit: 20 })\n```\n\n#####options\n\n- [tailable](#tailable) *\n- [sort](#sort) *\n- [limit](#limit) *\n- [skip](#skip) *\n- [maxScan](#maxScan) *\n- [batchSize](#batchSize) *\n- [comment](#comment) *\n- [snapshot](#snapshot) *\n- [hint](#hint) *\n- [slaveOk](#slaveOk) *\n- [safe](http://docs.mongodb.org/manual/reference/write-concern/): Boolean - passed through to the collection. Setting to `true` is equivalent to `{ w: 1 }`\n- [collection](#collection): the collection to query against\n\n_* denotes a query helper method is also available_\n\n###mquery.canMerge(conditions)\n\nDetermines if `conditions` can be merged using `mquery().merge()`.\n\n```js\nvar query = mquery({ type: \'drum\' });\nvar okToMerge = mquery.canMerge(anObject)\nif (okToMerge) {\n  query.merge(anObject);\n}\n```\n\n##mquery.use$geoWithin\n\nMongoDB 2.4 introduced the `$geoWithin` operator which replaces and is 100% backward compatible with `$within`. As of mquery 0.2, we default to using `$geoWithin` for all `within()` calls.\n\nIf you are running MongoDB < 2.4 this will be problematic. To force `mquery` to be backward compatible and always use `$within`, set the `mquery.use$geoWithin` flag to `false`.\n\n```js\nmquery.use$geoWithin = false;\n```\n\n##Custom Base Queries\n\nOften times we want custom base queries that encapsulate predefined criteria. With `mquery` this is easy. First create the query you want to reuse and call its `toConstructor()` method which returns a new subclass of `mquery` that retains all options and criteria of the original.\n\n```js\nvar greatMovies = mquery(movieCollection).where(\'rating\').gte(4.5).toConstructor();\n\n// use it!\ngreatMovies().count(function (err, n) {\n  console.log(\'There are %d great movies\', n);\n});\n\ngreatMovies().where({ name: /^Life/ }).select(\'name\').find(function (err, docs) {\n  console.log(docs);\n});\n```\n\n##Validation\n\nMethod and options combinations are checked for validity at runtime to prevent creation of invalid query constructs. For example, a `distinct` query does not support specifying options like `hint` or field selection. In this case an error will be thrown so you can catch these mistakes in development.\n\n##Debug support\n\nDebug mode is provided through the use of the [debug](https://github.com/visionmedia/debug) module. To enable:\n\n    DEBUG=mquery node yourprogram.js\n\nRead the debug module documentation for more details.\n\n## General compatibility\n\n#### ObjectIds\n\n`mquery` clones query arguments before passing them to a `collection` method for execution.\nThis prevents accidental side-affects to the objects you pass.\nTo clone `ObjectIds` we need to make some assumptions.\n\nFirst, to check if an object is an `ObjectId`, we check its constructors name. If it matches either\n`ObjectId` or `ObjectID` we clone it.\n\nTo clone `ObjectIds`, we call its optional `clone` method. If a `clone` method does not exist, we fall\nback to calling `new obj.constructor(obj.id)`. We assume, for compatibility with the\nNode.js driver, that the `ObjectId` instance has a public `id` property and that\nwhen creating an `ObjectId` instance we can pass that `id` as an argument.\n\n#### Read Preferences\n\n`mquery` supports specifying [Read Preferences]() to control from which MongoDB node your query will read.\nThe Read Preferences spec also support specifying tags. To pass tags, some\ndrivers (Node.js driver) require passing a special constructor that handles both the read preference and its tags.\nIf you need to specify tags, pass an instance of your drivers ReadPreference constructor or roll your own. `mquery` will store whatever you provide and pass later to your collection during execution.\n\n##Future goals\n\n  - mongo shell compatibility\n  - browser compatibility\n\n## Installation\n\n    $ npm install mquery\n\n## License\n\n[MIT](https://github.com/aheckmann/mquery/blob/master/LICENSE)\n\n',
346 silly resolved     readmeFilename: 'README.md',
346 silly resolved     _id: 'mquery@0.5.3',
346 silly resolved     _from: 'mquery@0.5.3' } ]
347 info install hooks@0.2.1 into /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
348 info install mongodb@1.3.23 into /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
349 info install ms@0.1.0 into /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
350 info install muri@0.3.1 into /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
351 info install mpromise@0.4.3 into /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
352 info install sliced@0.0.5 into /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
353 info install mpath@0.1.1 into /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
354 info install regexp-clone@0.0.1 into /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
355 info install mquery@0.5.3 into /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
356 info installOne hooks@0.2.1
357 info installOne mongodb@1.3.23
358 info installOne ms@0.1.0
359 info installOne muri@0.3.1
360 info installOne mpromise@0.4.3
361 info installOne sliced@0.0.5
362 info installOne mpath@0.1.1
363 info installOne regexp-clone@0.0.1
364 info installOne mquery@0.5.3
365 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/hooks unbuild
366 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/mongodb unbuild
367 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/ms unbuild
368 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/muri unbuild
369 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/mpromise unbuild
370 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/sliced unbuild
371 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/mpath unbuild
372 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/regexp-clone unbuild
373 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/mquery unbuild
374 verbose tar unpack /Users/douglasskiser/.npm/hooks/0.2.1/package.tgz
375 silly lockFile d5b134a1-ules-mongoose-node-modules-hooks tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/hooks
376 verbose lock tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/hooks /Users/douglasskiser/.npm/d5b134a1-ules-mongoose-node-modules-hooks.lock
377 silly lockFile 8a5b1ea4-iser-npm-hooks-0-2-1-package-tgz tar:///Users/douglasskiser/.npm/hooks/0.2.1/package.tgz
378 verbose lock tar:///Users/douglasskiser/.npm/hooks/0.2.1/package.tgz /Users/douglasskiser/.npm/8a5b1ea4-iser-npm-hooks-0-2-1-package-tgz.lock
379 verbose tar unpack /Users/douglasskiser/.npm/mongodb/1.3.23/package.tgz
380 silly lockFile f727630c-es-mongoose-node-modules-mongodb tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/mongodb
381 verbose lock tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/mongodb /Users/douglasskiser/.npm/f727630c-es-mongoose-node-modules-mongodb.lock
382 silly lockFile 9739a35b-r-npm-mongodb-1-3-23-package-tgz tar:///Users/douglasskiser/.npm/mongodb/1.3.23/package.tgz
383 verbose lock tar:///Users/douglasskiser/.npm/mongodb/1.3.23/package.tgz /Users/douglasskiser/.npm/9739a35b-r-npm-mongodb-1-3-23-package-tgz.lock
384 verbose tar unpack /Users/douglasskiser/.npm/ms/0.1.0/package.tgz
385 silly lockFile f224ae7c-modules-mongoose-node-modules-ms tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/ms
386 verbose lock tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/ms /Users/douglasskiser/.npm/f224ae7c-modules-mongoose-node-modules-ms.lock
387 silly lockFile bbe8281e-sskiser-npm-ms-0-1-0-package-tgz tar:///Users/douglasskiser/.npm/ms/0.1.0/package.tgz
388 verbose lock tar:///Users/douglasskiser/.npm/ms/0.1.0/package.tgz /Users/douglasskiser/.npm/bbe8281e-sskiser-npm-ms-0-1-0-package-tgz.lock
389 verbose tar unpack /Users/douglasskiser/.npm/muri/0.3.1/package.tgz
390 silly lockFile 463876cc-dules-mongoose-node-modules-muri tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/muri
391 verbose lock tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/muri /Users/douglasskiser/.npm/463876cc-dules-mongoose-node-modules-muri.lock
392 silly lockFile 05dc2271-kiser-npm-muri-0-3-1-package-tgz tar:///Users/douglasskiser/.npm/muri/0.3.1/package.tgz
393 verbose lock tar:///Users/douglasskiser/.npm/muri/0.3.1/package.tgz /Users/douglasskiser/.npm/05dc2271-kiser-npm-muri-0-3-1-package-tgz.lock
394 verbose tar unpack /Users/douglasskiser/.npm/mpromise/0.4.3/package.tgz
395 silly lockFile 7d228944-s-mongoose-node-modules-mpromise tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/mpromise
396 verbose lock tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/mpromise /Users/douglasskiser/.npm/7d228944-s-mongoose-node-modules-mpromise.lock
397 silly lockFile 32a3e21b-r-npm-mpromise-0-4-3-package-tgz tar:///Users/douglasskiser/.npm/mpromise/0.4.3/package.tgz
398 verbose lock tar:///Users/douglasskiser/.npm/mpromise/0.4.3/package.tgz /Users/douglasskiser/.npm/32a3e21b-r-npm-mpromise-0-4-3-package-tgz.lock
399 verbose tar unpack /Users/douglasskiser/.npm/sliced/0.0.5/package.tgz
400 silly lockFile 147ab69f-les-mongoose-node-modules-sliced tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/sliced
401 verbose lock tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/sliced /Users/douglasskiser/.npm/147ab69f-les-mongoose-node-modules-sliced.lock
402 silly lockFile 952f8d56-ser-npm-sliced-0-0-5-package-tgz tar:///Users/douglasskiser/.npm/sliced/0.0.5/package.tgz
403 verbose lock tar:///Users/douglasskiser/.npm/sliced/0.0.5/package.tgz /Users/douglasskiser/.npm/952f8d56-ser-npm-sliced-0-0-5-package-tgz.lock
404 verbose tar unpack /Users/douglasskiser/.npm/mpath/0.1.1/package.tgz
405 silly lockFile 7bf7bbbb-ules-mongoose-node-modules-mpath tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/mpath
406 verbose lock tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/mpath /Users/douglasskiser/.npm/7bf7bbbb-ules-mongoose-node-modules-mpath.lock
407 silly lockFile 4eeface6-iser-npm-mpath-0-1-1-package-tgz tar:///Users/douglasskiser/.npm/mpath/0.1.1/package.tgz
408 verbose lock tar:///Users/douglasskiser/.npm/mpath/0.1.1/package.tgz /Users/douglasskiser/.npm/4eeface6-iser-npm-mpath-0-1-1-package-tgz.lock
409 verbose tar unpack /Users/douglasskiser/.npm/regexp-clone/0.0.1/package.tgz
410 silly lockFile 4d4ebf05-ngoose-node-modules-regexp-clone tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/regexp-clone
411 verbose lock tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/regexp-clone /Users/douglasskiser/.npm/4d4ebf05-ngoose-node-modules-regexp-clone.lock
412 silly lockFile b42adc82-m-regexp-clone-0-0-1-package-tgz tar:///Users/douglasskiser/.npm/regexp-clone/0.0.1/package.tgz
413 verbose lock tar:///Users/douglasskiser/.npm/regexp-clone/0.0.1/package.tgz /Users/douglasskiser/.npm/b42adc82-m-regexp-clone-0-0-1-package-tgz.lock
414 verbose tar unpack /Users/douglasskiser/.npm/mquery/0.5.3/package.tgz
415 silly lockFile 4911a292-les-mongoose-node-modules-mquery tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/mquery
416 verbose lock tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/mquery /Users/douglasskiser/.npm/4911a292-les-mongoose-node-modules-mquery.lock
417 silly lockFile 1e229834-ser-npm-mquery-0-5-3-package-tgz tar:///Users/douglasskiser/.npm/mquery/0.5.3/package.tgz
418 verbose lock tar:///Users/douglasskiser/.npm/mquery/0.5.3/package.tgz /Users/douglasskiser/.npm/1e229834-ser-npm-mquery-0-5-3-package-tgz.lock
419 silly gunzTarPerm modes [ '755', '644' ]
420 silly gunzTarPerm modes [ '755', '644' ]
421 silly gunzTarPerm modes [ '755', '644' ]
422 silly gunzTarPerm extractEntry package.json
423 silly gunzTarPerm extractEntry .npmignore
424 silly gunzTarPerm extractEntry README.md
425 silly lockFile 4d4ebf05-ngoose-node-modules-regexp-clone tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/regexp-clone
426 silly lockFile 4d4ebf05-ngoose-node-modules-regexp-clone tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/regexp-clone
427 silly lockFile d5b134a1-ules-mongoose-node-modules-hooks tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/hooks
428 silly lockFile d5b134a1-ules-mongoose-node-modules-hooks tar:///Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/hooks
429 silly lockFile b42adc82-m-regexp-clone-0-0-1-package-tgz tar:///Users/douglasskiser/.npm/regexp-clone/0.0.1/package.tgz
430 silly lockFile b42adc82-m-regexp-clone-0-0-1-package-tgz tar:///Users/douglasskiser/.npm/regexp-clone/0.0.1/package.tgz
431 silly lockFile 8a5b1ea4-iser-npm-hooks-0-2-1-package-tgz tar:///Users/douglasskiser/.npm/hooks/0.2.1/package.tgz
432 silly lockFile 8a5b1ea4-iser-npm-hooks-0-2-1-package-tgz tar:///Users/douglasskiser/.npm/hooks/0.2.1/package.tgz
433 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/regexp-clone unbuild
434 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/hooks unbuild
435 verbose about to build /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose
436 info /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose unbuild
437 info preuninstall mongoose@3.8.8
438 silly gunzTarPerm extractEntry LICENSE
439 silly gunzTarPerm extractEntry index.js
440 info uninstall mongoose@3.8.8
441 verbose true,/Users/douglasskiser/Desktop/cbnVerification/node_modules,/Users/douglasskiser/Desktop/cbnVerification/node_modules unbuild mongoose@3.8.8
442 info postuninstall mongoose@3.8.8
443 silly gunzTarPerm extractEntry .travis.yml
444 silly gunzTarPerm extractEntry History.md
445 error error rolling back Error: ENOTEMPTY, rmdir '/Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules'
445 error error rolling back  mongoose@3.8.8 { [Error: ENOTEMPTY, rmdir '/Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules']
445 error error rolling back   errno: 53,
445 error error rolling back   code: 'ENOTEMPTY',
445 error error rolling back   path: '/Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules' }
446 error Error: ENOENT, open '/Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/regexp-clone/package.json'
447 error If you need help, you may report this log at:
447 error     <http://github.com/isaacs/npm/issues>
447 error or email it to:
447 error     <npm-@googlegroups.com>
448 error System Darwin 13.1.0
449 error command "node" "/usr/local/bin/npm" "install"
450 error cwd /Users/douglasskiser/Desktop/cbnVerification
451 error node -v v0.10.18
452 error npm -v 1.3.8
453 error path /Users/douglasskiser/Desktop/cbnVerification/node_modules/mongoose/node_modules/regexp-clone/package.json
454 error code ENOENT
455 error errno 34
456 verbose exit [ 34, true ]
